
CANalog_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800433c  0800433c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800433c  0800433c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800433c  0800433c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000010  08004350  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004350  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fe  00000000  00000000  0002be01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd5a  00000000  00000000  0002f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8ef  00000000  00000000  0004af92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6e2  00000000  00000000  00057881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4f63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  000f4fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042a8 	.word	0x080042a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080042a8 	.word	0x080042a8

080001c8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001cc:	4b16      	ldr	r3, [pc, #88]	; (8000228 <MX_CAN_Init+0x60>)
 80001ce:	4a17      	ldr	r2, [pc, #92]	; (800022c <MX_CAN_Init+0x64>)
 80001d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80001d2:	4b15      	ldr	r3, [pc, #84]	; (8000228 <MX_CAN_Init+0x60>)
 80001d4:	2210      	movs	r2, #16
 80001d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001d8:	4b13      	ldr	r3, [pc, #76]	; (8000228 <MX_CAN_Init+0x60>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <MX_CAN_Init+0x60>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80001e4:	4b10      	ldr	r3, [pc, #64]	; (8000228 <MX_CAN_Init+0x60>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001ea:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_CAN_Init+0x60>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <MX_CAN_Init+0x60>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <MX_CAN_Init+0x60>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <MX_CAN_Init+0x60>)
 80001fe:	2200      	movs	r2, #0
 8000200:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000202:	4b09      	ldr	r3, [pc, #36]	; (8000228 <MX_CAN_Init+0x60>)
 8000204:	2200      	movs	r2, #0
 8000206:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <MX_CAN_Init+0x60>)
 800020a:	2200      	movs	r2, #0
 800020c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <MX_CAN_Init+0x60>)
 8000210:	2200      	movs	r2, #0
 8000212:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <MX_CAN_Init+0x60>)
 8000216:	f001 f833 	bl	8001280 <HAL_CAN_Init>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000220:	f000 fe90 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000002c 	.word	0x2000002c
 800022c:	40006400 	.word	0x40006400

08000230 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <HAL_CAN_MspInit+0x80>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d129      	bne.n	80002a6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000252:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <HAL_CAN_MspInit+0x84>)
 8000254:	69db      	ldr	r3, [r3, #28]
 8000256:	4a17      	ldr	r2, [pc, #92]	; (80002b4 <HAL_CAN_MspInit+0x84>)
 8000258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800025c:	61d3      	str	r3, [r2, #28]
 800025e:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_CAN_MspInit+0x84>)
 8000260:	69db      	ldr	r3, [r3, #28]
 8000262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <HAL_CAN_MspInit+0x84>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <HAL_CAN_MspInit+0x84>)
 8000270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000274:	6153      	str	r3, [r2, #20]
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <HAL_CAN_MspInit+0x84>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000282:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000288:	2302      	movs	r3, #2
 800028a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000290:	2303      	movs	r3, #3
 8000292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000294:	2309      	movs	r3, #9
 8000296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	4619      	mov	r1, r3
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f001 fd47 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80002a6:	bf00      	nop
 80002a8:	3728      	adds	r7, #40	; 0x28
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40006400 	.word	0x40006400
 80002b4:	40021000 	.word	0x40021000

080002b8 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <HAL_CAN_MspDeInit+0x34>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d10b      	bne.n	80002e2 <HAL_CAN_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <HAL_CAN_MspDeInit+0x38>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <HAL_CAN_MspDeInit+0x38>)
 80002d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80002d4:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80002d6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002de:	f001 fe9b 	bl	8002018 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40006400 	.word	0x40006400
 80002f0:	40021000 	.word	0x40021000

080002f4 <can_set_bit_timing>:
		.TimeSeg1 = CAN_BS1_13TQ,
		.TimeSeg2 = CAN_BS2_2TQ
};

/* set the can bit timing based on baud rate in signal handler */
void can_set_bit_timing(Signal_Handle_t *hsignal, CAN_HandleTypeDef *hcan) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	switch(hsignal->can_baud) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	891b      	ldrh	r3, [r3, #8]
 8000302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000306:	f000 80b8 	beq.w	800047a <can_set_bit_timing+0x186>
 800030a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800030e:	f300 80c3 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 8000312:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000316:	f000 80a2 	beq.w	800045e <can_set_bit_timing+0x16a>
 800031a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800031e:	f300 80bb 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 8000322:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000326:	f000 808b 	beq.w	8000440 <can_set_bit_timing+0x14c>
 800032a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800032e:	f300 80b3 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 8000332:	2bfa      	cmp	r3, #250	; 0xfa
 8000334:	d075      	beq.n	8000422 <can_set_bit_timing+0x12e>
 8000336:	2bfa      	cmp	r3, #250	; 0xfa
 8000338:	f300 80ae 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 800033c:	2b7d      	cmp	r3, #125	; 0x7d
 800033e:	d061      	beq.n	8000404 <can_set_bit_timing+0x110>
 8000340:	2b7d      	cmp	r3, #125	; 0x7d
 8000342:	f300 80a9 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 8000346:	2b64      	cmp	r3, #100	; 0x64
 8000348:	d04d      	beq.n	80003e6 <can_set_bit_timing+0xf2>
 800034a:	2b64      	cmp	r3, #100	; 0x64
 800034c:	f300 80a4 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 8000350:	2b53      	cmp	r3, #83	; 0x53
 8000352:	d039      	beq.n	80003c8 <can_set_bit_timing+0xd4>
 8000354:	2b53      	cmp	r3, #83	; 0x53
 8000356:	f300 809f 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 800035a:	2b32      	cmp	r3, #50	; 0x32
 800035c:	d025      	beq.n	80003aa <can_set_bit_timing+0xb6>
 800035e:	2b32      	cmp	r3, #50	; 0x32
 8000360:	f300 809a 	bgt.w	8000498 <can_set_bit_timing+0x1a4>
 8000364:	2b0a      	cmp	r3, #10
 8000366:	d002      	beq.n	800036e <can_set_bit_timing+0x7a>
 8000368:	2b14      	cmp	r3, #20
 800036a:	d00f      	beq.n	800038c <can_set_bit_timing+0x98>
		hcan->Init.SyncJumpWidth 	= bitRate_1000kbps.SyncJumpWidth;
		hcan->Init.TimeSeg1 		= bitRate_1000kbps.TimeSeg1;
		hcan->Init.TimeSeg2 		= bitRate_1000kbps.TimeSeg2;
		break;
	default:
		break;
 800036c:	e094      	b.n	8000498 <can_set_bit_timing+0x1a4>
		hcan->Init.Prescaler 		= bitRate_10kbps.Prescaler;
 800036e:	22c8      	movs	r2, #200	; 0xc8
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_10kbps.SyncJumpWidth;
 8000374:	2200      	movs	r2, #0
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_10kbps.TimeSeg1;
 800037a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_10kbps.TimeSeg2;
 8000382:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	615a      	str	r2, [r3, #20]
		break;
 800038a:	e086      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_20kbps.Prescaler;
 800038c:	2264      	movs	r2, #100	; 0x64
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_20kbps.SyncJumpWidth;
 8000392:	2200      	movs	r2, #0
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_20kbps.TimeSeg1;
 8000398:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_20kbps.TimeSeg2;
 80003a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	615a      	str	r2, [r3, #20]
		break;
 80003a8:	e077      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_50kbps.Prescaler;
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_50kbps.SyncJumpWidth;
 80003b0:	2200      	movs	r2, #0
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_50kbps.TimeSeg1;
 80003b6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_50kbps.TimeSeg2;
 80003be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	615a      	str	r2, [r3, #20]
		break;
 80003c6:	e068      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_83kbps.Prescaler;
 80003c8:	2218      	movs	r2, #24
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_83kbps.SyncJumpWidth;
 80003ce:	2200      	movs	r2, #0
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_83kbps.TimeSeg1;
 80003d4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_83kbps.TimeSeg2;
 80003dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	615a      	str	r2, [r3, #20]
		break;
 80003e4:	e059      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_100kbps.Prescaler;
 80003e6:	2214      	movs	r2, #20
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_100kbps.SyncJumpWidth;
 80003ec:	2200      	movs	r2, #0
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_100kbps.TimeSeg1;
 80003f2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_100kbps.TimeSeg2;
 80003fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	615a      	str	r2, [r3, #20]
		break;
 8000402:	e04a      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_125kbps.Prescaler;
 8000404:	2210      	movs	r2, #16
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_125kbps.SyncJumpWidth;
 800040a:	2200      	movs	r2, #0
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_125kbps.TimeSeg1;
 8000410:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_125kbps.TimeSeg2;
 8000418:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	615a      	str	r2, [r3, #20]
		break;
 8000420:	e03b      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_250kbps.Prescaler;
 8000422:	2208      	movs	r2, #8
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_250kbps.SyncJumpWidth;
 8000428:	2200      	movs	r2, #0
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_250kbps.TimeSeg1;
 800042e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_250kbps.TimeSeg2;
 8000436:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	615a      	str	r2, [r3, #20]
		break;
 800043e:	e02c      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_500kbps.Prescaler;
 8000440:	2204      	movs	r2, #4
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_500kbps.SyncJumpWidth;
 8000446:	2200      	movs	r2, #0
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_500kbps.TimeSeg1;
 800044c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_500kbps.TimeSeg2;
 8000454:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	615a      	str	r2, [r3, #20]
		break;
 800045c:	e01d      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_800kbps.Prescaler;
 800045e:	2204      	movs	r2, #4
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_800kbps.SyncJumpWidth;
 8000464:	2200      	movs	r2, #0
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_800kbps.TimeSeg1;
 800046a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_800kbps.TimeSeg2;
 8000472:	2200      	movs	r2, #0
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	615a      	str	r2, [r3, #20]
		break;
 8000478:	e00f      	b.n	800049a <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_1000kbps.Prescaler;
 800047a:	2202      	movs	r2, #2
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_1000kbps.SyncJumpWidth;
 8000480:	2200      	movs	r2, #0
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_1000kbps.TimeSeg1;
 8000486:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_1000kbps.TimeSeg2;
 800048e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	615a      	str	r2, [r3, #20]
		break;
 8000496:	e000      	b.n	800049a <can_set_bit_timing+0x1a6>
		break;
 8000498:	bf00      	nop
	}


}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <signal_init>:
							  16, 17, 18, 19, 20, 21, 22, 23,
							   8,  9, 10, 11, 12, 13, 14, 15,
							   0,  1,  2,  3,  4,  5,  6,  7};

/* initialize signal handle with default values at startup */
void signal_init(Signal_Handle_t *hsignal) {
 80004a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]

//	hsignal->sn = calc_sn();
	hsignal->can_baud = CAN_BAUD;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	22fa      	movs	r2, #250	; 0xfa
 80004b6:	811a      	strh	r2, [r3, #8]
	hsignal->can_id = CAN_ID;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2c      	ldr	r2, [pc, #176]	; (800056c <signal_init+0xc4>)
 80004bc:	60da      	str	r2, [r3, #12]
	hsignal->can_type = CAN_ID_TYPE;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	221d      	movs	r2, #29
 80004c2:	729a      	strb	r2, [r3, #10]
	hsignal->endianness = CAN_SIGNAL_ENDIAN;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	220c      	movs	r2, #12
 80004c8:	749a      	strb	r2, [r3, #18]
	hsignal->start_bit = CAN_SIGNAL_START_BIT;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	741a      	strb	r2, [r3, #16]
	hsignal->bit_len = CAN_SIGNAL_BIT_LEN;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2210      	movs	r2, #16
 80004d4:	745a      	strb	r2, [r3, #17]
	hsignal->max = CAN_SIGNAL_MAX;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80004dc:	829a      	strh	r2, [r3, #20]
	hsignal->min = CAN_SIGNAL_MIN;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	82da      	strh	r2, [r3, #22]
	hsignal->dac_out = 0;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	851a      	strh	r2, [r3, #40]	; 0x28
	hsignal->term = TERMINATION_OFF;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	761a      	strb	r2, [r3, #24]

	HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f001 fe79 	bl	80021f0 <HAL_GPIO_WritePin>

	hsignal->mask = 0;
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	f04f 0200 	mov.w	r2, #0
 8000504:	f04f 0300 	mov.w	r3, #0
 8000508:	e9c1 2308 	strd	r2, r3, [r1, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	e021      	b.n	8000556 <signal_init+0xae>
		hsignal->mask += 1ULL << i;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000518:	7bfe      	ldrb	r6, [r7, #15]
 800051a:	f04f 0201 	mov.w	r2, #1
 800051e:	f04f 0300 	mov.w	r3, #0
 8000522:	f1a6 0e20 	sub.w	lr, r6, #32
 8000526:	f1c6 0c20 	rsb	ip, r6, #32
 800052a:	fa03 f506 	lsl.w	r5, r3, r6
 800052e:	fa02 fe0e 	lsl.w	lr, r2, lr
 8000532:	ea45 050e 	orr.w	r5, r5, lr
 8000536:	fa22 fc0c 	lsr.w	ip, r2, ip
 800053a:	ea45 050c 	orr.w	r5, r5, ip
 800053e:	fa02 f406 	lsl.w	r4, r2, r6
 8000542:	eb10 0804 	adds.w	r8, r0, r4
 8000546:	eb41 0905 	adc.w	r9, r1, r5
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	e9c3 8908 	strd	r8, r9, [r3, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	3301      	adds	r3, #1
 8000554:	73fb      	strb	r3, [r7, #15]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	7c5b      	ldrb	r3, [r3, #17]
 800055a:	7bfa      	ldrb	r2, [r7, #15]
 800055c:	429a      	cmp	r2, r3
 800055e:	d3d8      	bcc.n	8000512 <signal_init+0x6a>
	}
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800056c:	18efb400 	.word	0x18efb400

08000570 <signal_update>:

/* new parameters were received, update calculated values */
void signal_update(Signal_Handle_t *hsignal) {
 8000570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]

//	hsignal->sn = calc_sn();	/* esp could send wrong sn so get it again */

	if (hsignal->term == TERMINATION_ON) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7e1b      	ldrb	r3, [r3, #24]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d107      	bne.n	8000592 <signal_update+0x22>
		HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f001 fe30 	bl	80021f0 <HAL_GPIO_WritePin>
 8000590:	e006      	b.n	80005a0 <signal_update+0x30>
	} else {
		HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f001 fe28 	bl	80021f0 <HAL_GPIO_WritePin>
	}

	hsignal->mask = 0;
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	f04f 0200 	mov.w	r2, #0
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	e021      	b.n	80005f8 <signal_update+0x88>
		hsignal->mask += 1ULL << i;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80005ba:	7bfe      	ldrb	r6, [r7, #15]
 80005bc:	f04f 0201 	mov.w	r2, #1
 80005c0:	f04f 0300 	mov.w	r3, #0
 80005c4:	f1a6 0e20 	sub.w	lr, r6, #32
 80005c8:	f1c6 0c20 	rsb	ip, r6, #32
 80005cc:	fa03 f506 	lsl.w	r5, r3, r6
 80005d0:	fa02 fe0e 	lsl.w	lr, r2, lr
 80005d4:	ea45 050e 	orr.w	r5, r5, lr
 80005d8:	fa22 fc0c 	lsr.w	ip, r2, ip
 80005dc:	ea45 050c 	orr.w	r5, r5, ip
 80005e0:	fa02 f406 	lsl.w	r4, r2, r6
 80005e4:	eb10 0804 	adds.w	r8, r0, r4
 80005e8:	eb41 0905 	adc.w	r9, r1, r5
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	e9c3 8908 	strd	r8, r9, [r3, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	3301      	adds	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7c5b      	ldrb	r3, [r3, #17]
 80005fc:	7bfa      	ldrb	r2, [r7, #15]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d3d8      	bcc.n	80005b4 <signal_update+0x44>
	}
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800060e <map>:

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 800060e:	b480      	push	{r7}
 8000610:	b085      	sub	sp, #20
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;;
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	69b9      	ldr	r1, [r7, #24]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	1a8a      	subs	r2, r1, r2
 8000628:	fb02 f203 	mul.w	r2, r2, r3
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1acb      	subs	r3, r1, r3
 8000632:	fbb2 f2f3 	udiv	r2, r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	4413      	add	r3, r2
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <nibble_swap>:

void nibble_swap(uint64_t *val) {
 8000646:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	uint64_t high_nibbles = (*val >> 4) & 0x0F0F0F0F0F0F0F0F;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000656:	f04f 0200 	mov.w	r2, #0
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	0902      	lsrs	r2, r0, #4
 8000660:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8000664:	090b      	lsrs	r3, r1, #4
 8000666:	f04f 300f 	mov.w	r0, #252645135	; 0xf0f0f0f
 800066a:	f04f 310f 	mov.w	r1, #252645135	; 0xf0f0f0f
 800066e:	ea02 0a00 	and.w	sl, r2, r0
 8000672:	ea03 0b01 	and.w	fp, r3, r1
 8000676:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	uint64_t low_nibbles  = (*val)      & 0x0F0F0F0F0F0F0F0F;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000680:	f04f 300f 	mov.w	r0, #252645135	; 0xf0f0f0f
 8000684:	f04f 310f 	mov.w	r1, #252645135	; 0xf0f0f0f
 8000688:	ea02 0800 	and.w	r8, r2, r0
 800068c:	ea03 0901 	and.w	r9, r3, r1
 8000690:	e9c7 8902 	strd	r8, r9, [r7, #8]

	*val = (low_nibbles << 4) | high_nibbles;
 8000694:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	010b      	lsls	r3, r1, #4
 80006a2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80006a6:	0102      	lsls	r2, r0, #4
 80006a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80006ac:	ea42 0400 	orr.w	r4, r2, r0
 80006b0:	ea43 0501 	orr.w	r5, r3, r1
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	e9c3 4500 	strd	r4, r5, [r3]
}
 80006ba:	bf00      	nop
 80006bc:	371c      	adds	r7, #28
 80006be:	46bd      	mov	sp, r7
 80006c0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80006c4:	4770      	bx	lr
	...

080006c8 <signal_calc>:

/* get signal from frame and set DAC output */
void signal_calc(Signal_Handle_t *hsignal) {
 80006c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006cc:	b091      	sub	sp, #68	; 0x44
 80006ce:	af02      	add	r7, sp, #8
 80006d0:	6278      	str	r0, [r7, #36]	; 0x24
	uint64_t temp = 0;
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (hsignal->endianness == SIGNAL_LITTLE_ENDIAN) {
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	7c9b      	ldrb	r3, [r3, #18]
 80006e2:	2b0c      	cmp	r3, #12
 80006e4:	d14e      	bne.n	8000784 <signal_calc+0xbc>
		for (uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006ec:	e02a      	b.n	8000744 <signal_calc+0x7c>
			temp += ((uint64_t) hsignal->frame[i] << (i * 8));
 80006ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	f04f 0300 	mov.w	r3, #0
 80006fc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000700:	00c9      	lsls	r1, r1, #3
 8000702:	f1a1 0420 	sub.w	r4, r1, #32
 8000706:	f1c1 0020 	rsb	r0, r1, #32
 800070a:	fa03 fb01 	lsl.w	fp, r3, r1
 800070e:	fa02 f404 	lsl.w	r4, r2, r4
 8000712:	ea4b 0b04 	orr.w	fp, fp, r4
 8000716:	fa22 f000 	lsr.w	r0, r2, r0
 800071a:	ea4b 0b00 	orr.w	fp, fp, r0
 800071e:	fa02 fa01 	lsl.w	sl, r2, r1
 8000722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000726:	eb1a 0102 	adds.w	r1, sl, r2
 800072a:	6139      	str	r1, [r7, #16]
 800072c:	eb4b 0303 	adc.w	r3, fp, r3
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000736:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		for (uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 800073a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800073e:	3301      	adds	r3, #1
 8000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000748:	2b07      	cmp	r3, #7
 800074a:	d9d0      	bls.n	80006ee <signal_calc+0x26>
		}

		temp = temp >> hsignal->start_bit;
 800074c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000752:	7c09      	ldrb	r1, [r1, #16]
 8000754:	f1c1 0420 	rsb	r4, r1, #32
 8000758:	f1a1 0020 	sub.w	r0, r1, #32
 800075c:	fa22 f501 	lsr.w	r5, r2, r1
 8000760:	61bd      	str	r5, [r7, #24]
 8000762:	fa03 f404 	lsl.w	r4, r3, r4
 8000766:	69bd      	ldr	r5, [r7, #24]
 8000768:	4325      	orrs	r5, r4
 800076a:	61bd      	str	r5, [r7, #24]
 800076c:	fa23 f000 	lsr.w	r0, r3, r0
 8000770:	69bc      	ldr	r4, [r7, #24]
 8000772:	4304      	orrs	r4, r0
 8000774:	61bc      	str	r4, [r7, #24]
 8000776:	40cb      	lsrs	r3, r1
 8000778:	61fb      	str	r3, [r7, #28]
 800077a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800077e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000782:	e055      	b.n	8000830 <signal_calc+0x168>
	} else {
        for(uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 8000784:	2300      	movs	r3, #0
 8000786:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800078a:	e02c      	b.n	80007e6 <signal_calc+0x11e>
        	temp += ((uint64_t)hsignal->frame[i] << (56 - (i * 8)));
 800078c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000792:	5cd3      	ldrb	r3, [r2, r3]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	f04f 0300 	mov.w	r3, #0
 800079a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800079e:	f1c1 0107 	rsb	r1, r1, #7
 80007a2:	00c9      	lsls	r1, r1, #3
 80007a4:	f1a1 0420 	sub.w	r4, r1, #32
 80007a8:	f1c1 0020 	rsb	r0, r1, #32
 80007ac:	fa03 f901 	lsl.w	r9, r3, r1
 80007b0:	fa02 f404 	lsl.w	r4, r2, r4
 80007b4:	ea49 0904 	orr.w	r9, r9, r4
 80007b8:	fa22 f000 	lsr.w	r0, r2, r0
 80007bc:	ea49 0900 	orr.w	r9, r9, r0
 80007c0:	fa02 f801 	lsl.w	r8, r2, r1
 80007c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80007c8:	eb18 0102 	adds.w	r1, r8, r2
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	eb49 0303 	adc.w	r3, r9, r3
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80007d8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        for(uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 80007dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007e0:	3301      	adds	r3, #1
 80007e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80007e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d9ce      	bls.n	800078c <signal_calc+0xc4>
        }

        /* swap nibbles for signals that are not 8 bit aligned */
        nibble_swap(&temp);
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff27 	bl	8000646 <nibble_swap>

        /* shift to signal data */
        temp = temp >> be_shift[hsignal->start_bit];
 80007f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80007fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007fe:	7c09      	ldrb	r1, [r1, #16]
 8000800:	4608      	mov	r0, r1
 8000802:	4921      	ldr	r1, [pc, #132]	; (8000888 <signal_calc+0x1c0>)
 8000804:	5c09      	ldrb	r1, [r1, r0]
 8000806:	f1c1 0420 	rsb	r4, r1, #32
 800080a:	f1a1 0020 	sub.w	r0, r1, #32
 800080e:	fa22 f501 	lsr.w	r5, r2, r1
 8000812:	fa03 f404 	lsl.w	r4, r3, r4
 8000816:	4325      	orrs	r5, r4
 8000818:	fa23 f000 	lsr.w	r0, r3, r0
 800081c:	4305      	orrs	r5, r0
 800081e:	fa23 f601 	lsr.w	r6, r3, r1
 8000822:	e9c7 560a 	strd	r5, r6, [r7, #40]	; 0x28

        /* return nibbles to original position */
        nibble_swap(&temp);
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff0b 	bl	8000646 <nibble_swap>
	}

	temp &= hsignal->mask;
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800083a:	ea00 0402 	and.w	r4, r0, r2
 800083e:	603c      	str	r4, [r7, #0]
 8000840:	400b      	ands	r3, r1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000848:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	hsignal->value = (uint16_t) temp;
 800084c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000850:	b292      	uxth	r2, r2
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	835a      	strh	r2, [r3, #26]

	hsignal->dac_out = (uint16_t) map(hsignal->value, hsignal->min, hsignal->max, 0, 4095);
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	8b5b      	ldrh	r3, [r3, #26]
 800085a:	4618      	mov	r0, r3
 800085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085e:	8adb      	ldrh	r3, [r3, #22]
 8000860:	4619      	mov	r1, r3
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	8a9b      	ldrh	r3, [r3, #20]
 8000866:	461a      	mov	r2, r3
 8000868:	f640 73ff 	movw	r3, #4095	; 0xfff
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	f7ff fecd 	bl	800060e <map>
 8000874:	4603      	mov	r3, r0
 8000876:	b29a      	uxth	r2, r3
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800087c:	bf00      	nop
 800087e:	373c      	adds	r7, #60	; 0x3c
 8000880:	46bd      	mov	sp, r7
 8000882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000886:	bf00      	nop
 8000888:	080042cc 	.word	0x080042cc

0800088c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_DAC_Init+0x4c>)
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <MX_DAC_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_DAC_Init+0x4c>)
 80008a4:	f001 f981 	bl	8001baa <HAL_DAC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80008ae:	f000 fb49 	bl	8000f44 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_DAC_Init+0x4c>)
 80008c2:	f001 f9ea 	bl	8001c9a <HAL_DAC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80008cc:	f000 fb3a 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000054 	.word	0x20000054
 80008dc:	40007400 	.word	0x40007400

080008e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <HAL_DAC_MspInit+0x74>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d124      	bne.n	800094c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_DAC_MspInit+0x78>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <HAL_DAC_MspInit+0x78>)
 8000908:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_DAC_MspInit+0x78>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_DAC_MspInit+0x78>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_DAC_MspInit+0x78>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_DAC_MspInit+0x78>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000932:	2310      	movs	r3, #16
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000936:	2303      	movs	r3, #3
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 f9f4 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40007400 	.word	0x40007400
 8000958:	40021000 	.word	0x40021000

0800095c <calc_sn>:
 */

#include "device_sn.h"

/* use the 96bit unique device ID to calculate a device SN for use with SSID unique name */
uint32_t calc_sn(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
	uint32_t uid[] = {HAL_GetUIDw0(), HAL_GetUIDw1(), HAL_GetUIDw2()};
 8000962:	f000 fc69 	bl	8001238 <HAL_GetUIDw0>
 8000966:	4603      	mov	r3, r0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	f000 fc71 	bl	8001250 <HAL_GetUIDw1>
 800096e:	4603      	mov	r3, r0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	f000 fc79 	bl	8001268 <HAL_GetUIDw2>
 8000976:	4603      	mov	r3, r0
 8000978:	60bb      	str	r3, [r7, #8]

	selectionSort(uid, 3);
 800097a:	463b      	mov	r3, r7
 800097c:	2103      	movs	r1, #3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f820 	bl	80009c4 <selectionSort>
	uint32_t sn = uid[3] - uid[2] - uid[1];
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad2      	subs	r2, r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	60fb      	str	r3, [r7, #12]

	return sn;
 8000990:	68fb      	ldr	r3, [r7, #12]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <swap>:

/* below functions modified from https://www.geeksforgeeks.org/c-program-to-sort-an-array-in-ascending-order/ */
void swap(uint32_t* xp, uint32_t* yp) {
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
	uint32_t temp = *xp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
    *xp = *yp;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
    *yp = temp;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <selectionSort>:

// Function to perform Selection Sort
void selectionSort(uint32_t arr[], uint32_t n) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	uint32_t i, j, min_idx;

    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e028      	b.n	8000a26 <selectionSort+0x62>

        // Find the minimum element in unsorted array
        min_idx = i;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	60fb      	str	r3, [r7, #12]
        for (j = i + 1; j < n; j++)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	3301      	adds	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	e010      	b.n	8000a02 <selectionSort+0x3e>
            if (arr[j] < arr[min_idx])
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	440b      	add	r3, r1
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d201      	bcs.n	80009fc <selectionSort+0x38>
                min_idx = j;
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	60fb      	str	r3, [r7, #12]
        for (j = i + 1; j < n; j++)
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	3301      	adds	r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d3ea      	bcc.n	80009e0 <selectionSort+0x1c>

        // Swap the found minimum element
        // with the first element
        swap(&arr[min_idx], &arr[i]);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	18d0      	adds	r0, r2, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f7ff ffbd 	bl	800099a <swap>
    for (i = 0; i < n - 1; i++) {
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d3d1      	bcc.n	80009d4 <selectionSort+0x10>
    }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a30      	ldr	r2, [pc, #192]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_RDY_Pin|CAN_LED_Pin|SPI_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f241 0138 	movw	r1, #4152	; 0x1038
 8000a88:	4824      	ldr	r0, [pc, #144]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a8a:	f001 fbb1 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_TERM_Pin|TP1_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f001 fbaa 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = V_B0_Pin|V_B1_Pin|V_B2_Pin;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ab0:	f001 f940 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_RDY_Pin|CAN_LED_Pin|SPI_LED_Pin|ERROR_LED_Pin;
 8000ab4:	f241 0338 	movw	r3, #4152	; 0x1038
 8000ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ace:	f001 f931 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f001 f923 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAN_TERM_Pin|TP1_Pin;
 8000aee:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f001 f913 	bl	8001d34 <HAL_GPIO_Init>

}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400

08000b20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b26:	f000 fb21 	bl	800116c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b2a:	f000 f99d 	bl	8000e68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b2e:	f7ff ff85 	bl	8000a3c <MX_GPIO_Init>
	MX_CAN_Init();
 8000b32:	f7ff fb49 	bl	80001c8 <MX_CAN_Init>
	MX_DAC_Init();
 8000b36:	f7ff fea9 	bl	800088c <MX_DAC_Init>
	MX_SPI2_Init();
 8000b3a:	f000 fa0f 	bl	8000f5c <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	sn = calc_sn();
 8000b3e:	f7ff ff0d 	bl	800095c <calc_sn>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4abc      	ldr	r2, [pc, #752]	; (8000e38 <main+0x318>)
 8000b46:	6013      	str	r3, [r2, #0]

	signal_init(&signal); /* initialize signal to default values */
 8000b48:	48bc      	ldr	r0, [pc, #752]	; (8000e3c <main+0x31c>)
 8000b4a:	f7ff fcad 	bl	80004a8 <signal_init>

	can_filter_init(&hcan, &canFilter);
 8000b4e:	49bc      	ldr	r1, [pc, #752]	; (8000e40 <main+0x320>)
 8000b50:	48bc      	ldr	r0, [pc, #752]	; (8000e44 <main+0x324>)
 8000b52:	f000 f9ca 	bl	8000eea <can_filter_init>

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000b56:	48bb      	ldr	r0, [pc, #748]	; (8000e44 <main+0x324>)
 8000b58:	f000 fd7a 	bl	8001650 <HAL_CAN_Start>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <main+0x46>
		Error_Handler();
 8000b62:	f000 f9ef 	bl	8000f44 <Error_Handler>
	}

	/* set DAC */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	48b6      	ldr	r0, [pc, #728]	; (8000e48 <main+0x328>)
 8000b6e:	f001 f83e 	bl	8001bee <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000b72:	2100      	movs	r1, #0
 8000b74:	48b4      	ldr	r0, [pc, #720]	; (8000e48 <main+0x328>)
 8000b76:	f001 f859 	bl	8001c2c <HAL_DAC_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* SPI Check ---------------------------------------------------------*/
		if (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == 0) { /* esp8266 wants to talk */
 8000b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f001 fb1d 	bl	80021c0 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f040 8101 	bne.w	8000d90 <main+0x270>
			HAL_GPIO_WritePin(SPI_LED_GPIO_Port, SPI_LED_Pin, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2110      	movs	r1, #16
 8000b92:	48ae      	ldr	r0, [pc, #696]	; (8000e4c <main+0x32c>)
 8000b94:	f001 fb2c 	bl	80021f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SPI2_RDY_GPIO_Port, SPI2_RDY_Pin, GPIO_PIN_RESET); /* signal to esp8266 we are ready to talk */
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9e:	48ab      	ldr	r0, [pc, #684]	; (8000e4c <main+0x32c>)
 8000ba0:	f001 fb26 	bl	80021f0 <HAL_GPIO_WritePin>

			uint8_t command_bit = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71fb      	strb	r3, [r7, #7]
			if (HAL_SPI_Receive(&hspi2, &command_bit, sizeof(command_bit), 2) != HAL_OK) {
 8000ba8:	1df9      	adds	r1, r7, #7
 8000baa:	2302      	movs	r3, #2
 8000bac:	2201      	movs	r2, #1
 8000bae:	48a8      	ldr	r0, [pc, #672]	; (8000e50 <main+0x330>)
 8000bb0:	f002 fe57 	bl	8003862 <HAL_SPI_Receive>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <main+0x9e>
				Error_Handler();
 8000bba:	f000 f9c3 	bl	8000f44 <Error_Handler>
			}

			switch (command_bit) {
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	3b3d      	subs	r3, #61	; 0x3d
 8000bc2:	2b16      	cmp	r3, #22
 8000bc4:	f200 80c0 	bhi.w	8000d48 <main+0x228>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <main+0xb0>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000c47 	.word	0x08000c47
 8000bd4:	08000d49 	.word	0x08000d49
 8000bd8:	08000c2d 	.word	0x08000c2d
 8000bdc:	08000d49 	.word	0x08000d49
 8000be0:	08000d49 	.word	0x08000d49
 8000be4:	08000d49 	.word	0x08000d49
 8000be8:	08000d31 	.word	0x08000d31
 8000bec:	08000d19 	.word	0x08000d19
 8000bf0:	08000d49 	.word	0x08000d49
 8000bf4:	08000cd1 	.word	0x08000cd1
 8000bf8:	08000d49 	.word	0x08000d49
 8000bfc:	08000ce9 	.word	0x08000ce9
 8000c00:	08000d49 	.word	0x08000d49
 8000c04:	08000d49 	.word	0x08000d49
 8000c08:	08000d49 	.word	0x08000d49
 8000c0c:	08000d49 	.word	0x08000d49
 8000c10:	08000d49 	.word	0x08000d49
 8000c14:	08000cb9 	.word	0x08000cb9
 8000c18:	08000d49 	.word	0x08000d49
 8000c1c:	08000d49 	.word	0x08000d49
 8000c20:	08000d49 	.word	0x08000d49
 8000c24:	08000d49 	.word	0x08000d49
 8000c28:	08000d01 	.word	0x08000d01
			case SPI_SIGNAL_SEND: /* esp is requesting parameters */
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal, sizeof(Signal_Handle_t), 5) != HAL_OK) {
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	2230      	movs	r2, #48	; 0x30
 8000c30:	4982      	ldr	r1, [pc, #520]	; (8000e3c <main+0x31c>)
 8000c32:	4887      	ldr	r0, [pc, #540]	; (8000e50 <main+0x330>)
 8000c34:	f002 fca7 	bl	8003586 <HAL_SPI_Transmit>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8086 	beq.w	8000d4c <main+0x22c>
					Error_Handler();
 8000c40:	f000 f980 	bl	8000f44 <Error_Handler>
				}
				break;
 8000c44:	e082      	b.n	8000d4c <main+0x22c>
			case SPI_SIGNAL_RECEIVE: /* esp is sending new parameters*/
				if (HAL_SPI_Receive(&hspi2, (uint8_t*) &signal, sizeof(Signal_Handle_t), 5) != HAL_OK) {
 8000c46:	2305      	movs	r3, #5
 8000c48:	2230      	movs	r2, #48	; 0x30
 8000c4a:	497c      	ldr	r1, [pc, #496]	; (8000e3c <main+0x31c>)
 8000c4c:	4880      	ldr	r0, [pc, #512]	; (8000e50 <main+0x330>)
 8000c4e:	f002 fe08 	bl	8003862 <HAL_SPI_Receive>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <main+0x13c>
					Error_Handler();
 8000c58:	f000 f974 	bl	8000f44 <Error_Handler>
				}

				signal_update(&signal); /* recalculate signal values */
 8000c5c:	4877      	ldr	r0, [pc, #476]	; (8000e3c <main+0x31c>)
 8000c5e:	f7ff fc87 	bl	8000570 <signal_update>
				/* restart CAN interface with new baud rate -----------------------*/
				if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 8000c62:	4878      	ldr	r0, [pc, #480]	; (8000e44 <main+0x324>)
 8000c64:	f000 fd38 	bl	80016d8 <HAL_CAN_Stop>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <main+0x152>
					Error_Handler();
 8000c6e:	f000 f969 	bl	8000f44 <Error_Handler>
				}
				/* stop CAN and deinit so we can configure it */
				if (HAL_CAN_DeInit(&hcan) != HAL_OK) {
 8000c72:	4874      	ldr	r0, [pc, #464]	; (8000e44 <main+0x324>)
 8000c74:	f000 fbff 	bl	8001476 <HAL_CAN_DeInit>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <main+0x162>
					Error_Handler();
 8000c7e:	f000 f961 	bl	8000f44 <Error_Handler>
				}
				/* set new bit timing */
				can_set_bit_timing(&signal, &hcan);
 8000c82:	4970      	ldr	r1, [pc, #448]	; (8000e44 <main+0x324>)
 8000c84:	486d      	ldr	r0, [pc, #436]	; (8000e3c <main+0x31c>)
 8000c86:	f7ff fb35 	bl	80002f4 <can_set_bit_timing>
				/* reinitialize CAN */
				if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000c8a:	486e      	ldr	r0, [pc, #440]	; (8000e44 <main+0x324>)
 8000c8c:	f000 faf8 	bl	8001280 <HAL_CAN_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <main+0x17a>
					Error_Handler();
 8000c96:	f000 f955 	bl	8000f44 <Error_Handler>
				}
				/* restart can */
				if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000c9a:	486a      	ldr	r0, [pc, #424]	; (8000e44 <main+0x324>)
 8000c9c:	f000 fcd8 	bl	8001650 <HAL_CAN_Start>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <main+0x18a>
					Error_Handler();
 8000ca6:	f000 f94d 	bl	8000f44 <Error_Handler>
				}
				/* set DAC to zero */
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000caa:	2300      	movs	r3, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4865      	ldr	r0, [pc, #404]	; (8000e48 <main+0x328>)
 8000cb2:	f000 ff9c 	bl	8001bee <HAL_DAC_SetValue>
				break;
 8000cb6:	e056      	b.n	8000d66 <main+0x246>
			case SPI_SEND_SN:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &sn, sizeof(sn), 5) != HAL_OK) {
 8000cb8:	2305      	movs	r3, #5
 8000cba:	2204      	movs	r2, #4
 8000cbc:	495e      	ldr	r1, [pc, #376]	; (8000e38 <main+0x318>)
 8000cbe:	4864      	ldr	r0, [pc, #400]	; (8000e50 <main+0x330>)
 8000cc0:	f002 fc61 	bl	8003586 <HAL_SPI_Transmit>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d042      	beq.n	8000d50 <main+0x230>
					Error_Handler();
 8000cca:	f000 f93b 	bl	8000f44 <Error_Handler>
				}
				break;
 8000cce:	e03f      	b.n	8000d50 <main+0x230>
			case SPI_SEND_FW_VERSION:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) FW_VERSION, sizeof(FW_VERSION), 5) != HAL_OK) {
 8000cd0:	2305      	movs	r3, #5
 8000cd2:	2209      	movs	r2, #9
 8000cd4:	495f      	ldr	r1, [pc, #380]	; (8000e54 <main+0x334>)
 8000cd6:	485e      	ldr	r0, [pc, #376]	; (8000e50 <main+0x330>)
 8000cd8:	f002 fc55 	bl	8003586 <HAL_SPI_Transmit>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d038      	beq.n	8000d54 <main+0x234>
					Error_Handler();
 8000ce2:	f000 f92f 	bl	8000f44 <Error_Handler>
				}
				break;
 8000ce6:	e035      	b.n	8000d54 <main+0x234>
			case SPI_SEND_HW_VERSION:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) HW_VERSION, sizeof(HW_VERSION), 5) != HAL_OK) {
 8000ce8:	2305      	movs	r3, #5
 8000cea:	2209      	movs	r2, #9
 8000cec:	4959      	ldr	r1, [pc, #356]	; (8000e54 <main+0x334>)
 8000cee:	4858      	ldr	r0, [pc, #352]	; (8000e50 <main+0x330>)
 8000cf0:	f002 fc49 	bl	8003586 <HAL_SPI_Transmit>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d02e      	beq.n	8000d58 <main+0x238>
					Error_Handler();
 8000cfa:	f000 f923 	bl	8000f44 <Error_Handler>
				}
				break;
 8000cfe:	e02b      	b.n	8000d58 <main+0x238>
			case SPI_SEND_CAN_SIGNAL:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal.value, sizeof(signal.value), 5) != HAL_OK) {
 8000d00:	2305      	movs	r3, #5
 8000d02:	2202      	movs	r2, #2
 8000d04:	4954      	ldr	r1, [pc, #336]	; (8000e58 <main+0x338>)
 8000d06:	4852      	ldr	r0, [pc, #328]	; (8000e50 <main+0x330>)
 8000d08:	f002 fc3d 	bl	8003586 <HAL_SPI_Transmit>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d024      	beq.n	8000d5c <main+0x23c>
					Error_Handler();
 8000d12:	f000 f917 	bl	8000f44 <Error_Handler>
				}
				break;
 8000d16:	e021      	b.n	8000d5c <main+0x23c>
			case SPI_SEND_DAC_VALUE:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal.dac_out, sizeof(signal.dac_out), 5) != HAL_OK) {
 8000d18:	2305      	movs	r3, #5
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	494f      	ldr	r1, [pc, #316]	; (8000e5c <main+0x33c>)
 8000d1e:	484c      	ldr	r0, [pc, #304]	; (8000e50 <main+0x330>)
 8000d20:	f002 fc31 	bl	8003586 <HAL_SPI_Transmit>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d01a      	beq.n	8000d60 <main+0x240>
					Error_Handler();
 8000d2a:	f000 f90b 	bl	8000f44 <Error_Handler>
				}
				break;
 8000d2e:	e017      	b.n	8000d60 <main+0x240>
			case SPI_SEND_CAN_FRAME:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal.frame, sizeof(signal.frame), 5) != HAL_OK) {
 8000d30:	2305      	movs	r3, #5
 8000d32:	2208      	movs	r2, #8
 8000d34:	4941      	ldr	r1, [pc, #260]	; (8000e3c <main+0x31c>)
 8000d36:	4846      	ldr	r0, [pc, #280]	; (8000e50 <main+0x330>)
 8000d38:	f002 fc25 	bl	8003586 <HAL_SPI_Transmit>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d010      	beq.n	8000d64 <main+0x244>
					Error_Handler();
 8000d42:	f000 f8ff 	bl	8000f44 <Error_Handler>
				}
				break;
 8000d46:	e00d      	b.n	8000d64 <main+0x244>
			default:
				break;
 8000d48:	bf00      	nop
 8000d4a:	e00c      	b.n	8000d66 <main+0x246>
				break;
 8000d4c:	bf00      	nop
 8000d4e:	e00a      	b.n	8000d66 <main+0x246>
				break;
 8000d50:	bf00      	nop
 8000d52:	e008      	b.n	8000d66 <main+0x246>
				break;
 8000d54:	bf00      	nop
 8000d56:	e006      	b.n	8000d66 <main+0x246>
				break;
 8000d58:	bf00      	nop
 8000d5a:	e004      	b.n	8000d66 <main+0x246>
				break;
 8000d5c:	bf00      	nop
 8000d5e:	e002      	b.n	8000d66 <main+0x246>
				break;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <main+0x246>
				break;
 8000d64:	bf00      	nop
			}

			HAL_GPIO_WritePin(SPI2_RDY_GPIO_Port, SPI2_RDY_Pin, GPIO_PIN_SET); /* return ready pin to high */
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6c:	4837      	ldr	r0, [pc, #220]	; (8000e4c <main+0x32c>)
 8000d6e:	f001 fa3f 	bl	80021f0 <HAL_GPIO_WritePin>

			while (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == 0) {
 8000d72:	bf00      	nop
 8000d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f001 fa20 	bl	80021c0 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f6      	beq.n	8000d74 <main+0x254>
				; /* loop until esp8266 pulls CS high */
			}
			HAL_GPIO_WritePin(SPI_LED_GPIO_Port, SPI_LED_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4830      	ldr	r0, [pc, #192]	; (8000e4c <main+0x32c>)
 8000d8c:	f001 fa30 	bl	80021f0 <HAL_GPIO_WritePin>
		}

		/* CAN ---------------------------------------------------------------*/
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8000d90:	2100      	movs	r1, #0
 8000d92:	482c      	ldr	r0, [pc, #176]	; (8000e44 <main+0x324>)
 8000d94:	f000 fdfb 	bl	800198e <HAL_CAN_GetRxFifoFillLevel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d045      	beq.n	8000e2a <main+0x30a>
			if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canRxHeader, canRxBuffer) != HAL_OK) {
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <main+0x340>)
 8000da0:	4a30      	ldr	r2, [pc, #192]	; (8000e64 <main+0x344>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4827      	ldr	r0, [pc, #156]	; (8000e44 <main+0x324>)
 8000da6:	f000 fce0 	bl	800176a <HAL_CAN_GetRxMessage>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <main+0x294>
				Error_Handler();
 8000db0:	f000 f8c8 	bl	8000f44 <Error_Handler>
			} // end HAL_CAN_GetRxMessage

			switch (signal.can_type) {
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <main+0x31c>)
 8000db6:	7a9b      	ldrb	r3, [r3, #10]
 8000db8:	2b0b      	cmp	r3, #11
 8000dba:	d002      	beq.n	8000dc2 <main+0x2a2>
 8000dbc:	2b1d      	cmp	r3, #29
 8000dbe:	d01a      	beq.n	8000df6 <main+0x2d6>
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, signal.dac_out);
					HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
				}
				break;
			default:
				break;
 8000dc0:	e038      	b.n	8000e34 <main+0x314>
				if (canRxHeader.StdId == signal.can_id) {
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <main+0x344>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <main+0x31c>)
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d12f      	bne.n	8000e2e <main+0x30e>
					memcpy(signal.frame, canRxBuffer, sizeof(signal.frame));
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <main+0x31c>)
 8000dd0:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <main+0x340>)
 8000dd2:	6810      	ldr	r0, [r2, #0]
 8000dd4:	6851      	ldr	r1, [r2, #4]
 8000dd6:	c303      	stmia	r3!, {r0, r1}
					signal_calc(&signal);
 8000dd8:	4818      	ldr	r0, [pc, #96]	; (8000e3c <main+0x31c>)
 8000dda:	f7ff fc75 	bl	80006c8 <signal_calc>
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, signal.dac_out);
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <main+0x31c>)
 8000de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	4818      	ldr	r0, [pc, #96]	; (8000e48 <main+0x328>)
 8000de8:	f000 ff01 	bl	8001bee <HAL_DAC_SetValue>
					HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
 8000dec:	2108      	movs	r1, #8
 8000dee:	4817      	ldr	r0, [pc, #92]	; (8000e4c <main+0x32c>)
 8000df0:	f001 fa16 	bl	8002220 <HAL_GPIO_TogglePin>
				break;
 8000df4:	e01b      	b.n	8000e2e <main+0x30e>
				if (canRxHeader.ExtId == signal.can_id) {
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <main+0x344>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <main+0x31c>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d117      	bne.n	8000e32 <main+0x312>
					memcpy(signal.frame, canRxBuffer, sizeof(signal.frame));
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <main+0x31c>)
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <main+0x340>)
 8000e06:	6810      	ldr	r0, [r2, #0]
 8000e08:	6851      	ldr	r1, [r2, #4]
 8000e0a:	c303      	stmia	r3!, {r0, r1}
					signal_calc(&signal);
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <main+0x31c>)
 8000e0e:	f7ff fc5b 	bl	80006c8 <signal_calc>
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, signal.dac_out);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <main+0x31c>)
 8000e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480b      	ldr	r0, [pc, #44]	; (8000e48 <main+0x328>)
 8000e1c:	f000 fee7 	bl	8001bee <HAL_DAC_SetValue>
					HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
 8000e20:	2108      	movs	r1, #8
 8000e22:	480a      	ldr	r0, [pc, #40]	; (8000e4c <main+0x32c>)
 8000e24:	f001 f9fc 	bl	8002220 <HAL_GPIO_TogglePin>
				break;
 8000e28:	e003      	b.n	8000e32 <main+0x312>
			} // end switch(signal.can_type)
		} // end HAL_CAN_GetRxFifoFillLevel
 8000e2a:	bf00      	nop
 8000e2c:	e6a5      	b.n	8000b7a <main+0x5a>
				break;
 8000e2e:	bf00      	nop
 8000e30:	e6a3      	b.n	8000b7a <main+0x5a>
				break;
 8000e32:	bf00      	nop
		if (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == 0) { /* esp8266 wants to talk */
 8000e34:	e6a1      	b.n	8000b7a <main+0x5a>
 8000e36:	bf00      	nop
 8000e38:	200000d4 	.word	0x200000d4
 8000e3c:	200000f8 	.word	0x200000f8
 8000e40:	20000128 	.word	0x20000128
 8000e44:	2000002c 	.word	0x2000002c
 8000e48:	20000054 	.word	0x20000054
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	20000070 	.word	0x20000070
 8000e54:	080042c0 	.word	0x080042c0
 8000e58:	20000112 	.word	0x20000112
 8000e5c:	20000120 	.word	0x20000120
 8000e60:	20000068 	.word	0x20000068
 8000e64:	200000d8 	.word	0x200000d8

08000e68 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b090      	sub	sp, #64	; 0x40
 8000e6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fa0e 	bl	8004298 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e9e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ea4:	f107 0318 	add.w	r3, r7, #24
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 f9d3 	bl	8002254 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x50>
		Error_Handler();
 8000eb4:	f000 f846 	bl	8000f44 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 f8c6 	bl	8003064 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x7a>
		Error_Handler();
 8000ede:	f000 f831 	bl	8000f44 <Error_Handler>
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	3740      	adds	r7, #64	; 0x40
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <can_filter_init>:

/* USER CODE BEGIN 4 */
void can_filter_init(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *canFilter) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
	canFilter->FilterBank = 0;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
	canFilter->FilterMode = CAN_FILTERMODE_IDMASK;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
	canFilter->FilterScale = CAN_FILTERSCALE_32BIT;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	61da      	str	r2, [r3, #28]
	canFilter->FilterIdHigh = 0;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	canFilter->FilterIdLow = 0;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
	canFilter->FilterMaskIdHigh = 0;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
	canFilter->FilterMaskIdLow = 0;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
	canFilter->FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
	canFilter->FilterActivation = ENABLE;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	621a      	str	r2, [r3, #32]

	if (HAL_CAN_ConfigFilter(hcan, canFilter) != HAL_OK) {
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 fac5 	bl	80014bc <HAL_CAN_ConfigFilter>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <can_filter_init+0x52>
		Error_Handler();
 8000f38:	f000 f804 	bl	8000f44 <Error_Handler>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2120      	movs	r1, #32
 8000f50:	4801      	ldr	r0, [pc, #4]	; (8000f58 <Error_Handler+0x14>)
 8000f52:	f001 f94d 	bl	80021f0 <HAL_GPIO_WritePin>
	while (1) {
 8000f56:	e7fe      	b.n	8000f56 <Error_Handler+0x12>
 8000f58:	48000400 	.word	0x48000400

08000f5c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <MX_SPI2_Init+0x70>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f74:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_SPI2_Init+0x6c>)
 8000fb4:	f002 fa3c 	bl	8003430 <HAL_SPI_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000fbe:	f7ff ffc1 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000070 	.word	0x20000070
 8000fcc:	40003800 	.word	0x40003800

08000fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d128      	bne.n	8001044 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_SPI_MspInit+0x80>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001022:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001034:	2305      	movs	r3, #5
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_SPI_MspInit+0x84>)
 8001040:	f000 fe78 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40003800 	.word	0x40003800
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x44>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f884 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopForever+0xe>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopForever+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f003 f883 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff fce9 	bl	8000b20 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001150:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	08004344 	.word	0x08004344
  ldr r2, =_sbss
 8001160:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001164:	20000154 	.word	0x20000154

08001168 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_IRQHandler>
	...

0800116c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 fce1 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff ff66 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fceb 	bl	8001b92 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f000 fcc1 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20000150 	.word	0x20000150

08001220 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;  
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000150 	.word	0x20000150

08001238 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetUIDw0+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	1ffff7ac 	.word	0x1ffff7ac

08001250 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetUIDw1+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	1ffff7b0 	.word	0x1ffff7b0

08001268 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetUIDw2+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	1ffff7b4 	.word	0x1ffff7b4

08001280 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0ed      	b.n	800146e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7fe ffc6 	bl	8000230 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0202 	bic.w	r2, r2, #2
 80012b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b4:	f7ff ffb4 	bl	8001220 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ba:	e012      	b.n	80012e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012bc:	f7ff ffb0 	bl	8001220 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d90b      	bls.n	80012e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2205      	movs	r2, #5
 80012da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0c5      	b.n	800146e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e5      	bne.n	80012bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001300:	f7ff ff8e 	bl	8001220 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001306:	e012      	b.n	800132e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001308:	f7ff ff8a 	bl	8001220 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d90b      	bls.n	800132e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e09f      	b.n	800146e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0e5      	beq.n	8001308 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e1b      	ldrb	r3, [r3, #24]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7e5b      	ldrb	r3, [r3, #25]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0220 	bic.w	r2, r2, #32
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7edb      	ldrb	r3, [r3, #27]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0210 	bic.w	r2, r2, #16
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0210 	orr.w	r2, r2, #16
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7f1b      	ldrb	r3, [r3, #28]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0208 	bic.w	r2, r2, #8
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7f5b      	ldrb	r3, [r3, #29]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0204 	orr.w	r2, r2, #4
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e007      	b.n	8001438 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0204 	bic.w	r2, r2, #4
 8001436:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	ea42 0103 	orr.w	r1, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e015      	b.n	80014b4 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f925 	bl	80016d8 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7fe ff12 	bl	80002b8 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a2:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014d4:	7cfb      	ldrb	r3, [r7, #19]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d003      	beq.n	80014e2 <HAL_CAN_ConfigFilter+0x26>
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	f040 80aa 	bne.w	8001636 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2201      	movs	r2, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	401a      	ands	r2, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d123      	bne.n	8001564 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800153e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3248      	adds	r2, #72	; 0x48
 8001544:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001558:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800155a:	6979      	ldr	r1, [r7, #20]
 800155c:	3348      	adds	r3, #72	; 0x48
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d122      	bne.n	80015b2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	431a      	orrs	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800158c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3248      	adds	r2, #72	; 0x48
 8001592:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a8:	6979      	ldr	r1, [r7, #20]
 80015aa:	3348      	adds	r3, #72	; 0x48
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	401a      	ands	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015cc:	e007      	b.n	80015de <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	401a      	ands	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015f8:	e007      	b.n	800160a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	431a      	orrs	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	431a      	orrs	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001628:	f023 0201 	bic.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e006      	b.n	8001644 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
  }
}
 8001644:	4618      	mov	r0, r3
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d12e      	bne.n	80016c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800167c:	f7ff fdd0 	bl	8001220 <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001682:	e012      	b.n	80016aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001684:	f7ff fdcc 	bl	8001220 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b0a      	cmp	r3, #10
 8001690:	d90b      	bls.n	80016aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2205      	movs	r2, #5
 80016a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e012      	b.n	80016d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e5      	bne.n	8001684 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e006      	b.n	80016d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
  }
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d133      	bne.n	8001754 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016fc:	f7ff fd90 	bl	8001220 <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001702:	e012      	b.n	800172a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001704:	f7ff fd8c 	bl	8001220 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d90b      	bls.n	800172a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2205      	movs	r2, #5
 8001722:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e01b      	b.n	8001762 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0e5      	beq.n	8001704 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0202 	bic.w	r2, r2, #2
 8001746:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e006      	b.n	8001762 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
  }
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800176a:	b480      	push	{r7}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d003      	beq.n	800178e <HAL_CAN_GetRxMessage+0x24>
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	2b02      	cmp	r3, #2
 800178a:	f040 80f3 	bne.w	8001974 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10e      	bne.n	80017b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0e7      	b.n	8001982 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0d8      	b.n	8001982 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	331b      	adds	r3, #27
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0204 	and.w	r2, r3, #4
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	331b      	adds	r3, #27
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0d5b      	lsrs	r3, r3, #21
 80017fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e00b      	b.n	8001820 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	331b      	adds	r3, #27
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	331b      	adds	r3, #27
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4413      	add	r3, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0202 	and.w	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	331b      	adds	r3, #27
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	3304      	adds	r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 020f 	and.w	r2, r3, #15
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	331b      	adds	r3, #27
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	3304      	adds	r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b2da      	uxtb	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	331b      	adds	r3, #27
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	3304      	adds	r3, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0a1a      	lsrs	r2, r3, #8
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0c1a      	lsrs	r2, r3, #16
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	3302      	adds	r3, #2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0e1a      	lsrs	r2, r3, #24
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	3303      	adds	r3, #3
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	3304      	adds	r3, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0a1a      	lsrs	r2, r3, #8
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3305      	adds	r3, #5
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0c1a      	lsrs	r2, r3, #16
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3306      	adds	r3, #6
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4413      	add	r3, r2
 8001938:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0e1a      	lsrs	r2, r3, #24
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3307      	adds	r3, #7
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	e007      	b.n	8001970 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	e006      	b.n	8001982 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d002      	beq.n	80019b0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d10f      	bne.n	80019d0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e005      	b.n	80019d0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80019d0:	68fb      	ldr	r3, [r7, #12]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff47 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff5c 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb0 	bl	8001b00 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e014      	b.n	8001be6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7fe fe87 	bl	80008e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001bee:	b480      	push	{r7}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d104      	bne.n	8001c16 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	3308      	adds	r3, #8
 8001c14:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	795b      	ldrb	r3, [r3, #5]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_DAC_Start+0x16>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e025      	b.n	8001c8e <HAL_DAC_Start+0x62>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001c6c:	2b3c      	cmp	r3, #60	; 0x3c
 8001c6e:	d107      	bne.n	8001c80 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b087      	sub	sp, #28
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	795b      	ldrb	r3, [r3, #5]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_DAC_ConfigChannel+0x20>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e036      	b.n	8001d28 <HAL_DAC_ConfigChannel+0x8e>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001cce:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6819      	ldr	r1, [r3, #0]
 8001d08:	22c0      	movs	r2, #192	; 0xc0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43da      	mvns	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	400a      	ands	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e14e      	b.n	8001fe2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8140 	beq.w	8001fdc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d00b      	beq.n	8001d7c <HAL_GPIO_Init+0x48>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d70:	2b11      	cmp	r3, #17
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0xea>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0203 	and.w	r2, r3, #3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 809a 	beq.w	8001fdc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b55      	ldr	r3, [pc, #340]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a54      	ldr	r2, [pc, #336]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eea:	d013      	beq.n	8001f14 <HAL_GPIO_Init+0x1e0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a46      	ldr	r2, [pc, #280]	; (8002008 <HAL_GPIO_Init+0x2d4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <HAL_GPIO_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_GPIO_Init+0x2d8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_Init+0x1d8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a44      	ldr	r2, [pc, #272]	; (8002010 <HAL_GPIO_Init+0x2dc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_GPIO_Init+0x1d4>
 8001f04:	2303      	movs	r3, #3
 8001f06:	e006      	b.n	8001f16 <HAL_GPIO_Init+0x1e2>
 8001f08:	2305      	movs	r3, #5
 8001f0a:	e004      	b.n	8001f16 <HAL_GPIO_Init+0x1e2>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x1e2>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_GPIO_Init+0x1e2>
 8001f14:	2300      	movs	r3, #0
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	f002 0203 	and.w	r2, r2, #3
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f26:	4937      	ldr	r1, [pc, #220]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f34:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f58:	4a2e      	ldr	r2, [pc, #184]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x2e0>)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f aea9 	bne.w	8001d44 <HAL_GPIO_Init+0x10>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40021000 	.word	0x40021000
 8002004:	40010000 	.word	0x40010000
 8002008:	48000400 	.word	0x48000400
 800200c:	48000800 	.word	0x48000800
 8002010:	48000c00 	.word	0x48000c00
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002026:	e0b2      	b.n	800218e <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002028:	2201      	movs	r2, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80a5 	beq.w	8002188 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800203e:	4a5b      	ldr	r2, [pc, #364]	; (80021ac <HAL_GPIO_DeInit+0x194>)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002066:	d013      	beq.n	8002090 <HAL_GPIO_DeInit+0x78>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <HAL_GPIO_DeInit+0x198>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_DeInit+0x74>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a50      	ldr	r2, [pc, #320]	; (80021b4 <HAL_GPIO_DeInit+0x19c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_DeInit+0x70>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a4f      	ldr	r2, [pc, #316]	; (80021b8 <HAL_GPIO_DeInit+0x1a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_GPIO_DeInit+0x6c>
 8002080:	2303      	movs	r3, #3
 8002082:	e006      	b.n	8002092 <HAL_GPIO_DeInit+0x7a>
 8002084:	2305      	movs	r3, #5
 8002086:	e004      	b.n	8002092 <HAL_GPIO_DeInit+0x7a>
 8002088:	2302      	movs	r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_DeInit+0x7a>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_GPIO_DeInit+0x7a>
 8002090:	2300      	movs	r3, #0
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	f002 0203 	and.w	r2, r2, #3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4093      	lsls	r3, r2
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d132      	bne.n	8002108 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020a2:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4944      	ldr	r1, [pc, #272]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020b0:	4b42      	ldr	r3, [pc, #264]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4940      	ldr	r1, [pc, #256]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	493d      	ldr	r1, [pc, #244]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4939      	ldr	r1, [pc, #228]	; (80021bc <HAL_GPIO_DeInit+0x1a4>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <HAL_GPIO_DeInit+0x194>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	482c      	ldr	r0, [pc, #176]	; (80021ac <HAL_GPIO_DeInit+0x194>)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	400a      	ands	r2, r1
 8002102:	3302      	adds	r3, #2
 8002104:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2103      	movs	r1, #3
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	08d2      	lsrs	r2, r2, #3
 800213e:	4019      	ands	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2103      	movs	r1, #3
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	2101      	movs	r1, #1
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2103      	movs	r1, #3
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3301      	adds	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f af46 	bne.w	8002028 <HAL_GPIO_DeInit+0x10>
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800220c:	e002      	b.n	8002214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43d9      	mvns	r1, r3
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	400b      	ands	r3, r1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800225a:	af00      	add	r7, sp, #0
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f000 bef4 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 816a 	beq.w	8002552 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800227e:	4bb3      	ldr	r3, [pc, #716]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d00c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800228a:	4bb0      	ldr	r3, [pc, #704]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d159      	bne.n	800234a <HAL_RCC_OscConfig+0xf6>
 8002296:	4bad      	ldr	r3, [pc, #692]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d152      	bne.n	800234a <HAL_RCC_OscConfig+0xf6>
 80022a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x82>
 80022d0:	4b9e      	ldr	r3, [pc, #632]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0xae>
 80022d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022fe:	4b93      	ldr	r3, [pc, #588]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002306:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800230a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800230e:	fa92 f2a2 	rbit	r2, r2
 8002312:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002316:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800231a:	fab2 f282 	clz	r2, r2
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f042 0220 	orr.w	r2, r2, #32
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f002 021f 	and.w	r2, r2, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 810c 	beq.w	8002550 <HAL_RCC_OscConfig+0x2fc>
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 8106 	bne.w	8002550 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	f000 be86 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x110>
 8002356:	4b7d      	ldr	r3, [pc, #500]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7c      	ldr	r2, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e030      	b.n	80023c6 <HAL_RCC_OscConfig+0x172>
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x134>
 800236e:	4b77      	ldr	r3, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b74      	ldr	r3, [pc, #464]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a73      	ldr	r2, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01e      	b.n	80023c6 <HAL_RCC_OscConfig+0x172>
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x15a>
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6c      	ldr	r2, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800239a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a69      	ldr	r2, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x172>
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a66      	ldr	r2, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	495d      	ldr	r1, [pc, #372]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d059      	beq.n	8002498 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe ff1c 	bl	8001220 <HAL_GetTick>
 80023e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ee:	f7fe ff17 	bl	8001220 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d902      	bls.n	8002404 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	f000 be29 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 8002404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002408:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002418:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d102      	bne.n	8002436 <HAL_RCC_OscConfig+0x1e2>
 8002430:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	e015      	b.n	8002462 <HAL_RCC_OscConfig+0x20e>
 8002436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800244a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002452:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002466:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800246a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800246e:	fa92 f2a2 	rbit	r2, r2
 8002472:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002476:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0ab      	beq.n	80023ee <HAL_RCC_OscConfig+0x19a>
 8002496:	e05c      	b.n	8002552 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fec2 	bl	8001220 <HAL_GetTick>
 800249c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a2:	f7fe febd 	bl	8001220 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d902      	bls.n	80024b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f000 bdcf 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 80024b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_OscConfig+0x296>
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x2c2>
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002502:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002506:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800251e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002522:	fa92 f2a2 	rbit	r2, r2
 8002526:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800252a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f002 021f 	and.w	r2, r2, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ab      	bne.n	80024a2 <HAL_RCC_OscConfig+0x24e>
 800254a:	e002      	b.n	8002552 <HAL_RCC_OscConfig+0x2fe>
 800254c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 816f 	beq.w	8002840 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002562:	4bd0      	ldr	r3, [pc, #832]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800256e:	4bcd      	ldr	r3, [pc, #820]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b08      	cmp	r3, #8
 8002578:	d16c      	bne.n	8002654 <HAL_RCC_OscConfig+0x400>
 800257a:	4bca      	ldr	r3, [pc, #808]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d166      	bne.n	8002654 <HAL_RCC_OscConfig+0x400>
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002598:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_OscConfig+0x362>
 80025b0:	4bbc      	ldr	r3, [pc, #752]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	e013      	b.n	80025de <HAL_RCC_OscConfig+0x38a>
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025c8:	2302      	movs	r3, #2
 80025ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025da:	4bb2      	ldr	r3, [pc, #712]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2202      	movs	r2, #2
 80025e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x3cc>
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d002      	beq.n	8002620 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f000 bd1b 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4ba0      	ldr	r3, [pc, #640]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	21f8      	movs	r1, #248	; 0xf8
 8002630:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002638:	fa91 f1a1 	rbit	r1, r1
 800263c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002640:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002644:	fab1 f181 	clz	r1, r1
 8002648:	b2c9      	uxtb	r1, r1
 800264a:	408b      	lsls	r3, r1
 800264c:	4995      	ldr	r1, [pc, #596]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	e0f5      	b.n	8002840 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8085 	beq.w	800276a <HAL_RCC_OscConfig+0x516>
 8002660:	2301      	movs	r3, #1
 8002662:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002672:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002680:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	461a      	mov	r2, r3
 8002688:	2301      	movs	r3, #1
 800268a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fdc8 	bl	8001220 <HAL_GetTick>
 8002690:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002696:	f7fe fdc3 	bl	8001220 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d902      	bls.n	80026ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	f000 bcd5 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x488>
 80026d6:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e013      	b.n	8002704 <HAL_RCC_OscConfig+0x4b0>
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2202      	movs	r2, #2
 8002706:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800270a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002716:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0af      	beq.n	8002696 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b5b      	ldr	r3, [pc, #364]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	21f8      	movs	r1, #248	; 0xf8
 8002746:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800274e:	fa91 f1a1 	rbit	r1, r1
 8002752:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002756:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800275a:	fab1 f181 	clz	r1, r1
 800275e:	b2c9      	uxtb	r1, r1
 8002760:	408b      	lsls	r3, r1
 8002762:	4950      	ldr	r1, [pc, #320]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e06a      	b.n	8002840 <HAL_RCC_OscConfig+0x5ec>
 800276a:	2301      	movs	r3, #1
 800276c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800277c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800278a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	461a      	mov	r2, r3
 8002792:	2300      	movs	r3, #0
 8002794:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fd43 	bl	8001220 <HAL_GetTick>
 800279a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7fe fd3e 	bl	8001220 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 bc50 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_OscConfig+0x592>
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	e013      	b.n	800280e <HAL_RCC_OscConfig+0x5ba>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2202      	movs	r2, #2
 8002810:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002814:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002818:	fa92 f2a2 	rbit	r2, r2
 800281c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002820:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1af      	bne.n	80027a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80da 	beq.w	8002a04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d069      	beq.n	800292e <HAL_RCC_OscConfig+0x6da>
 800285a:	2301      	movs	r3, #1
 800285c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800286c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_OscConfig+0x654>)
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	461a      	mov	r2, r3
 8002880:	2301      	movs	r3, #1
 8002882:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7fe fccc 	bl	8001220 <HAL_GetTick>
 8002888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288c:	e00e      	b.n	80028ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fcc7 	bl	8001220 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d906      	bls.n	80028ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e3d9      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	10908120 	.word	0x10908120
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028c2:	2202      	movs	r2, #2
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028da:	2202      	movs	r2, #2
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4ba5      	ldr	r3, [pc, #660]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 80028f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028f6:	2102      	movs	r1, #2
 80028f8:	6019      	str	r1, [r3, #0]
 80028fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f1a3 	rbit	r1, r3
 8002904:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002908:	6019      	str	r1, [r3, #0]
  return result;
 800290a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0b0      	beq.n	800288e <HAL_RCC_OscConfig+0x63a>
 800292c:	e06a      	b.n	8002a04 <HAL_RCC_OscConfig+0x7b0>
 800292e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800294a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <HAL_RCC_OscConfig+0x934>)
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	461a      	mov	r2, r3
 800295c:	2300      	movs	r3, #0
 800295e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fc5e 	bl	8001220 <HAL_GetTick>
 8002964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	e009      	b.n	800297e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fc59 	bl	8001220 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e36b      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 800297e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002982:	2202      	movs	r2, #2
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800299a:	2202      	movs	r2, #2
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029b2:	2202      	movs	r2, #2
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c6:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 80029c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029ce:	2102      	movs	r1, #2
 80029d0:	6019      	str	r1, [r3, #0]
 80029d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f1a3 	rbit	r1, r3
 80029dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029e0:	6019      	str	r1, [r3, #0]
  return result;
 80029e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1b2      	bne.n	800296a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8158 	beq.w	8002cc4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11a      	bne.n	8002a8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a4b      	ldr	r2, [pc, #300]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a64:	f7fe fbdc 	bl	8001220 <HAL_GetTick>
 8002a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e009      	b.n	8002a82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fbd7 	bl	8001220 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e2e9      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ef      	beq.n	8002a6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x852>
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a39      	ldr	r2, [pc, #228]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e02f      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10c      	bne.n	8002aca <HAL_RCC_OscConfig+0x876>
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a33      	ldr	r2, [pc, #204]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	e01d      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x89a>
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
 8002aee:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d06b      	beq.n	8002be8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fb86 	bl	8001220 <HAL_GetTick>
 8002b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7fe fb81 	bl	8001220 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e291      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002b32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b36:	2202      	movs	r2, #2
 8002b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f2a3 	rbit	r2, r3
 8002b44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b60:	601a      	str	r2, [r3, #0]
  return result;
 8002b62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCC_OscConfig+0x93c>
 8002b7c:	4b01      	ldr	r3, [pc, #4]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x958>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	10908120 	.word	0x10908120
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4bbb      	ldr	r3, [pc, #748]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	6011      	str	r1, [r2, #0]
 8002bb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fa92 f1a2 	rbit	r1, r2
 8002bbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bc2:	6011      	str	r1, [r2, #0]
  return result;
 8002bc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d099      	beq.n	8002b1a <HAL_RCC_OscConfig+0x8c6>
 8002be6:	e063      	b.n	8002cb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7fe fb1a 	bl	8001220 <HAL_GetTick>
 8002bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fb15 	bl	8001220 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e225      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002c0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c0e:	2202      	movs	r2, #2
 8002c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	fa93 f2a3 	rbit	r2, r3
 8002c1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c26:	2202      	movs	r2, #2
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c38:	601a      	str	r2, [r3, #0]
  return result;
 8002c3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_OscConfig+0xa06>
 8002c54:	4b90      	ldr	r3, [pc, #576]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	e00d      	b.n	8002c76 <HAL_RCC_OscConfig+0xa22>
 8002c5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c5e:	2202      	movs	r2, #2
 8002c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	4b89      	ldr	r3, [pc, #548]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	fa92 f1a2 	rbit	r1, r2
 8002c88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c8c:	6011      	str	r1, [r2, #0]
  return result;
 8002c8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f002 021f 	and.w	r2, r2, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1a0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b77      	ldr	r3, [pc, #476]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	4a76      	ldr	r2, [pc, #472]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 81c2 	beq.w	8003054 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd0:	4b71      	ldr	r3, [pc, #452]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f000 819c 	beq.w	8003016 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	f040 8114 	bne.w	8002f12 <HAL_RCC_OscConfig+0xcbe>
 8002cea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fa7e 	bl	8001220 <HAL_GetTick>
 8002d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe fa79 	bl	8001220 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e18b      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002d3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d56:	601a      	str	r2, [r3, #0]
  return result;
 8002d58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_OscConfig+0xb24>
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	e01b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb5c>
 8002d78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002db8:	6011      	str	r1, [r2, #0]
 8002dba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	fa92 f1a2 	rbit	r1, r2
 8002dc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dc8:	6011      	str	r1, [r2, #0]
  return result;
 8002dca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	fab2 f282 	clz	r2, r2
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f042 0220 	orr.w	r2, r2, #32
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	f002 021f 	and.w	r2, r2, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f202 	lsl.w	r2, r1, r2
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d19e      	bne.n	8002d2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	4925      	ldr	r1, [pc, #148]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e20:	601a      	str	r2, [r3, #0]
  return result;
 8002e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e26:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f9ef 	bl	8001220 <HAL_GetTick>
 8002e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e46:	e009      	b.n	8002e5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f9ea 	bl	8001220 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0fc      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002e5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e74:	601a      	str	r2, [r3, #0]
  return result;
 8002e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCC_OscConfig+0xc48>
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e01e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xc80>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ed8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002edc:	6011      	str	r1, [r2, #0]
 8002ede:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	fa92 f1a2 	rbit	r1, r2
 8002ee8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002eec:	6011      	str	r1, [r2, #0]
  return result;
 8002eee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f042 0220 	orr.w	r2, r2, #32
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d09b      	beq.n	8002e48 <HAL_RCC_OscConfig+0xbf4>
 8002f10:	e0a0      	b.n	8003054 <HAL_RCC_OscConfig+0xe00>
 8002f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2a:	601a      	str	r2, [r3, #0]
  return result;
 8002f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	461a      	mov	r2, r3
 8002f44:	2300      	movs	r3, #0
 8002f46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe f96a 	bl	8001220 <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f50:	e009      	b.n	8002f66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe f965 	bl	8001220 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e077      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7e:	601a      	str	r2, [r3, #0]
  return result;
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xd4c>
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	e01b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd84>
 8002fa0:	f107 0320 	add.w	r3, r7, #32
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f107 0320 	add.w	r3, r7, #32
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f107 0318 	add.w	r3, r7, #24
 8002fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f107 0318 	add.w	r3, r7, #24
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	fa93 f2a3 	rbit	r2, r3
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f107 0210 	add.w	r2, r7, #16
 8002fdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fe0:	6011      	str	r1, [r2, #0]
 8002fe2:	f107 0210 	add.w	r2, r7, #16
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fa92 f1a2 	rbit	r1, r2
 8002fec:	f107 020c 	add.w	r2, r7, #12
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f107 020c 	add.w	r2, r7, #12
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f002 021f 	and.w	r2, r2, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f202 	lsl.w	r2, r1, r2
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d19e      	bne.n	8002f52 <HAL_RCC_OscConfig+0xcfe>
 8003014:	e01e      	b.n	8003054 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e018      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800302c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	429a      	cmp	r2, r3
 800303c:	d108      	bne.n	8003050 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800303e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b09e      	sub	sp, #120	; 0x78
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e162      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800307c:	4b90      	ldr	r3, [pc, #576]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d910      	bls.n	80030ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	498b      	ldr	r1, [pc, #556]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e14a      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b82      	ldr	r3, [pc, #520]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	497f      	ldr	r1, [pc, #508]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80dc 	beq.w	8003290 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d13c      	bne.n	800315a <HAL_RCC_ClockConfig+0xf6>
 80030e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d102      	bne.n	800310a <HAL_RCC_ClockConfig+0xa6>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	e00f      	b.n	800312a <HAL_RCC_ClockConfig+0xc6>
 800310a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	667b      	str	r3, [r7, #100]	; 0x64
 8003118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800311c:	663b      	str	r3, [r7, #96]	; 0x60
 800311e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800312e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003132:	fa92 f2a2 	rbit	r2, r2
 8003136:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f042 0220 	orr.w	r2, r2, #32
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f002 021f 	and.w	r2, r2, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d17b      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0f3      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d13c      	bne.n	80031dc <HAL_RCC_ClockConfig+0x178>
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003166:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_RCC_ClockConfig+0x128>
 8003186:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e00f      	b.n	80031ac <HAL_RCC_ClockConfig+0x148>
 800318c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80031b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b4:	fa92 f2a2 	rbit	r2, r2
 80031b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f002 021f 	and.w	r2, r2, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d13a      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0b2      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
 80031dc:	2302      	movs	r3, #2
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_RCC_ClockConfig+0x1a0>
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	e00d      	b.n	8003220 <HAL_RCC_ClockConfig+0x1bc>
 8003204:	2302      	movs	r3, #2
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2202      	movs	r2, #2
 8003222:	61ba      	str	r2, [r7, #24]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	fa92 f2a2 	rbit	r2, r2
 800322a:	617a      	str	r2, [r7, #20]
  return result;
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e079      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	491a      	ldr	r1, [pc, #104]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fd ffde 	bl	8001220 <HAL_GetTick>
 8003264:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fd ffda 	bl	8001220 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e061      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d214      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e040      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	491a      	ldr	r1, [pc, #104]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4912      	ldr	r1, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003306:	f000 f829 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800330a:	4601      	mov	r1, r0
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003314:	22f0      	movs	r2, #240	; 0xf0
 8003316:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	60fa      	str	r2, [r7, #12]
  return result;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	40d3      	lsrs	r3, r2
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x2ec>)
 800332c:	5cd3      	ldrb	r3, [r2, r3]
 800332e:	fa21 f303 	lsr.w	r3, r1, r3
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCC_ClockConfig+0x2f0>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x2f4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd ff2c 	bl	8001198 <HAL_InitTick>
  
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3778      	adds	r7, #120	; 0x78
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	0800430c 	.word	0x0800430c
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b08b      	sub	sp, #44	; 0x2c
 8003360:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b04      	cmp	r3, #4
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x30>
 8003386:	2b08      	cmp	r3, #8
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x36>
 800338a:	e03c      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800338c:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 800338e:	623b      	str	r3, [r7, #32]
      break;
 8003390:	e03c      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003398:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800339c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	607a      	str	r2, [r7, #4]
  return result;
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	40d3      	lsrs	r3, r2
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	220f      	movs	r2, #15
 80033c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	60fa      	str	r2, [r7, #12]
  return result;
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	40d3      	lsrs	r3, r2
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e004      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a0c      	ldr	r2, [pc, #48]	; (800342c <HAL_RCC_GetSysClockFreq+0xd0>)
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	623b      	str	r3, [r7, #32]
      break;
 8003404:	e002      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003408:	623b      	str	r3, [r7, #32]
      break;
 800340a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340c:	6a3b      	ldr	r3, [r7, #32]
}
 800340e:	4618      	mov	r0, r3
 8003410:	372c      	adds	r7, #44	; 0x2c
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	007a1200 	.word	0x007a1200
 8003424:	0800431c 	.word	0x0800431c
 8003428:	0800432c 	.word	0x0800432c
 800342c:	003d0900 	.word	0x003d0900

08003430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e09d      	b.n	800357e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003452:	d009      	beq.n	8003468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
 800345a:	e005      	b.n	8003468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fda4 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a8:	d902      	bls.n	80034b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e002      	b.n	80034b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034be:	d007      	beq.n	80034d0 <HAL_SPI_Init+0xa0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	ea42 0103 	orr.w	r1, r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	f003 0204 	and.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800354c:	ea42 0103 	orr.w	r1, r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_SPI_Transmit+0x22>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e158      	b.n	800385a <HAL_SPI_Transmit+0x2d4>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b0:	f7fd fe36 	bl	8001220 <HAL_GetTick>
 80035b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ca:	e13d      	b.n	8003848 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Transmit+0x52>
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035dc:	e134      	b.n	8003848 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2203      	movs	r2, #3
 80035e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003628:	d10f      	bne.n	800364a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d007      	beq.n	8003668 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003670:	d94b      	bls.n	800370a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Transmit+0xfa>
 800367a:	8afb      	ldrh	r3, [r7, #22]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d13e      	bne.n	80036fe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	881a      	ldrh	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	1c9a      	adds	r2, r3, #2
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036a4:	e02b      	b.n	80036fe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d112      	bne.n	80036da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	1c9a      	adds	r2, r3, #2
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036d8:	e011      	b.n	80036fe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036da:	f7fd fda1 	bl	8001220 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d803      	bhi.n	80036f2 <HAL_SPI_Transmit+0x16c>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f0:	d102      	bne.n	80036f8 <HAL_SPI_Transmit+0x172>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036fc:	e0a4      	b.n	8003848 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ce      	bne.n	80036a6 <HAL_SPI_Transmit+0x120>
 8003708:	e07c      	b.n	8003804 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_SPI_Transmit+0x192>
 8003712:	8afb      	ldrh	r3, [r7, #22]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d170      	bne.n	80037fa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d912      	bls.n	8003748 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	881a      	ldrh	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b02      	subs	r3, #2
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003746:	e058      	b.n	80037fa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	7812      	ldrb	r2, [r2, #0]
 8003754:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800376e:	e044      	b.n	80037fa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d12b      	bne.n	80037d6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d912      	bls.n	80037ae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	881a      	ldrh	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	1c9a      	adds	r2, r3, #2
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b02      	subs	r3, #2
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037ac:	e025      	b.n	80037fa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	330c      	adds	r3, #12
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037d4:	e011      	b.n	80037fa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037d6:	f7fd fd23 	bl	8001220 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d803      	bhi.n	80037ee <HAL_SPI_Transmit+0x268>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ec:	d102      	bne.n	80037f4 <HAL_SPI_Transmit+0x26e>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037f8:	e026      	b.n	8003848 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1b5      	bne.n	8003770 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	6839      	ldr	r1, [r7, #0]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fcdb 	bl	80041c4 <SPI_EndRxTxTransaction>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e000      	b.n	8003848 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003846:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003858:	7ffb      	ldrb	r3, [r7, #31]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b088      	sub	sp, #32
 8003866:	af02      	add	r7, sp, #8
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800387e:	d112      	bne.n	80038a6 <HAL_SPI_Receive+0x44>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10e      	bne.n	80038a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2204      	movs	r2, #4
 800388c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f910 	bl	8003ac2 <HAL_SPI_TransmitReceive>
 80038a2:	4603      	mov	r3, r0
 80038a4:	e109      	b.n	8003aba <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_SPI_Receive+0x52>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e102      	b.n	8003aba <HAL_SPI_Receive+0x258>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038bc:	f7fd fcb0 	bl	8001220 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
 80038d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038d2:	e0e9      	b.n	8003aa8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_Receive+0x7e>
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038e4:	e0e0      	b.n	8003aa8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2204      	movs	r2, #4
 80038ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003930:	d908      	bls.n	8003944 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e007      	b.n	8003954 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	d10f      	bne.n	800397e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	d007      	beq.n	800399c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a4:	d867      	bhi.n	8003a76 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039a6:	e030      	b.n	8003a0a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d117      	bne.n	80039e6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f103 020c 	add.w	r2, r3, #12
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	7812      	ldrb	r2, [r2, #0]
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80039e4:	e011      	b.n	8003a0a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e6:	f7fd fc1b 	bl	8001220 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d803      	bhi.n	80039fe <HAL_SPI_Receive+0x19c>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039fc:	d102      	bne.n	8003a04 <HAL_SPI_Receive+0x1a2>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a08:	e04e      	b.n	8003aa8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1c8      	bne.n	80039a8 <HAL_SPI_Receive+0x146>
 8003a16:	e034      	b.n	8003a82 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d115      	bne.n	8003a52 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	b292      	uxth	r2, r2
 8003a32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	1c9a      	adds	r2, r3, #2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a50:	e011      	b.n	8003a76 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a52:	f7fd fbe5 	bl	8001220 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d803      	bhi.n	8003a6a <HAL_SPI_Receive+0x208>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a68:	d102      	bne.n	8003a70 <HAL_SPI_Receive+0x20e>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a74:	e018      	b.n	8003aa8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ca      	bne.n	8003a18 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fb44 	bl	8004114 <SPI_EndRxTransaction>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
 8003aa4:	e000      	b.n	8003aa8 <HAL_SPI_Receive+0x246>
  }

error :
 8003aa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b08a      	sub	sp, #40	; 0x28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_SPI_TransmitReceive+0x26>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e1fb      	b.n	8003ee0 <HAL_SPI_TransmitReceive+0x41e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af0:	f7fd fb96 	bl	8001220 <HAL_GetTick>
 8003af4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003afc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b0c:	7efb      	ldrb	r3, [r7, #27]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d00e      	beq.n	8003b30 <HAL_SPI_TransmitReceive+0x6e>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b18:	d106      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x66>
 8003b22:	7efb      	ldrb	r3, [r7, #27]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d003      	beq.n	8003b30 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b2e:	e1cd      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0x80>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0x80>
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b48:	e1c0      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d003      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2205      	movs	r2, #5
 8003b5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	887a      	ldrh	r2, [r7, #2]
 8003b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	887a      	ldrh	r2, [r7, #2]
 8003b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	887a      	ldrh	r2, [r7, #2]
 8003b84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	887a      	ldrh	r2, [r7, #2]
 8003b8a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba0:	d802      	bhi.n	8003ba8 <HAL_SPI_TransmitReceive+0xe6>
 8003ba2:	8a3b      	ldrh	r3, [r7, #16]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d908      	bls.n	8003bba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	e007      	b.n	8003bca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bc8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d007      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf0:	d97c      	bls.n	8003cec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_SPI_TransmitReceive+0x13e>
 8003bfa:	8a7b      	ldrh	r3, [r7, #18]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d169      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c24:	e056      	b.n	8003cd4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d11b      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x1aa>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x1aa>
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d113      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d11c      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x1f2>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	b292      	uxth	r2, r2
 8003c92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cb4:	f7fd fab4 	bl	8001220 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d807      	bhi.n	8003cd4 <HAL_SPI_TransmitReceive+0x212>
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cca:	d003      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cd2:	e0fb      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1a3      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x164>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d19d      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x164>
 8003cea:	e0df      	b.n	8003eac <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x23a>
 8003cf4:	8a7b      	ldrh	r3, [r7, #18]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	f040 80cb 	bne.w	8003e92 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d912      	bls.n	8003d2c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	1c9a      	adds	r2, r3, #2
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b02      	subs	r3, #2
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d2a:	e0b2      	b.n	8003e92 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d52:	e09e      	b.n	8003e92 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d134      	bne.n	8003dcc <HAL_SPI_TransmitReceive+0x30a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x30a>
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d12c      	bne.n	8003dcc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d912      	bls.n	8003da2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b02      	subs	r3, #2
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da0:	e012      	b.n	8003dc8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d148      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x3aa>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d042      	beq.n	8003e6c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d923      	bls.n	8003e3a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b02      	subs	r3, #2
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d81f      	bhi.n	8003e68 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e016      	b.n	8003e68 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f103 020c 	add.w	r2, r3, #12
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e6c:	f7fd f9d8 	bl	8001220 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d803      	bhi.n	8003e84 <HAL_SPI_TransmitReceive+0x3c2>
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e82:	d102      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x3c8>
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e90:	e01c      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f47f af5b 	bne.w	8003d54 <HAL_SPI_TransmitReceive+0x292>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f47f af54 	bne.w	8003d54 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f987 	bl	80041c4 <SPI_EndRxTxTransaction>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	661a      	str	r2, [r3, #96]	; 0x60
 8003ec8:	e000      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3728      	adds	r7, #40	; 0x28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ef8:	f7fd f992 	bl	8001220 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f08:	f7fd f98a 	bl	8001220 <HAL_GetTick>
 8003f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	015b      	lsls	r3, r3, #5
 8003f14:	0d1b      	lsrs	r3, r3, #20
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1e:	e054      	b.n	8003fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f26:	d050      	beq.n	8003fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f28:	f7fd f97a 	bl	8001220 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d902      	bls.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d13d      	bne.n	8003fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f56:	d111      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f60:	d004      	beq.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d107      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	d10f      	bne.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e017      	b.n	8003fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d19b      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004006:	f7fd f90b 	bl	8001220 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	4413      	add	r3, r2
 8004014:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004016:	f7fd f903 	bl	8001220 <HAL_GetTick>
 800401a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800401c:	4b3c      	ldr	r3, [pc, #240]	; (8004110 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00da      	lsls	r2, r3, #3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	0d1b      	lsrs	r3, r3, #20
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004034:	e05f      	b.n	80040f6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800403c:	d106      	bne.n	800404c <SPI_WaitFifoStateUntilTimeout+0x54>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004052:	d050      	beq.n	80040f6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004054:	f7fd f8e4 	bl	8001220 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d902      	bls.n	800406a <SPI_WaitFifoStateUntilTimeout+0x72>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d13d      	bne.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004082:	d111      	bne.n	80040a8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	d004      	beq.n	8004098 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d107      	bne.n	80040a8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b0:	d10f      	bne.n	80040d2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e010      	b.n	8004108 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d197      	bne.n	8004036 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000000 	.word	0x20000000

08004114 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004128:	d111      	bne.n	800414e <SPI_EndRxTransaction+0x3a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004132:	d004      	beq.n	800413e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d107      	bne.n	800414e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fec5 	bl	8003ee8 <SPI_WaitFlagStateUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e023      	b.n	80041bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800417c:	d11d      	bne.n	80041ba <SPI_EndRxTransaction+0xa6>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004186:	d004      	beq.n	8004192 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d113      	bne.n	80041ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2200      	movs	r2, #0
 800419a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff ff2a 	bl	8003ff8 <SPI_WaitFifoStateUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e000      	b.n	80041bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff ff0b 	bl	8003ff8 <SPI_WaitFifoStateUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e027      	b.n	8004248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	2180      	movs	r1, #128	; 0x80
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff fe70 	bl	8003ee8 <SPI_WaitFlagStateUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e014      	b.n	8004248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2200      	movs	r2, #0
 8004226:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fee4 	bl	8003ff8 <SPI_WaitFifoStateUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e000      	b.n	8004248 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4d0d      	ldr	r5, [pc, #52]	; (8004288 <__libc_init_array+0x38>)
 8004254:	4c0d      	ldr	r4, [pc, #52]	; (800428c <__libc_init_array+0x3c>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	2600      	movs	r6, #0
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4d0b      	ldr	r5, [pc, #44]	; (8004290 <__libc_init_array+0x40>)
 8004262:	4c0c      	ldr	r4, [pc, #48]	; (8004294 <__libc_init_array+0x44>)
 8004264:	f000 f820 	bl	80042a8 <_init>
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	2600      	movs	r6, #0
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f855 3b04 	ldr.w	r3, [r5], #4
 8004278:	4798      	blx	r3
 800427a:	3601      	adds	r6, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004282:	4798      	blx	r3
 8004284:	3601      	adds	r6, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	0800433c 	.word	0x0800433c
 800428c:	0800433c 	.word	0x0800433c
 8004290:	0800433c 	.word	0x0800433c
 8004294:	08004340 	.word	0x08004340

08004298 <memset>:
 8004298:	4402      	add	r2, r0
 800429a:	4603      	mov	r3, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	f803 1b01 	strb.w	r1, [r3], #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
