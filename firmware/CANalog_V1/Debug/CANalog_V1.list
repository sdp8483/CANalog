
CANalog_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004350  08004350  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004350  08004350  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004350  08004350  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000010  08004364  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004364  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fe  00000000  00000000  0002be01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd5a  00000000  00000000  0002f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8ef  00000000  00000000  0004af92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6e2  00000000  00000000  00057881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4f63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  000f4fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042b0 	.word	0x080042b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080042b0 	.word	0x080042b0

080001c8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <MX_CAN_Init+0x64>)
 80001ce:	4a18      	ldr	r2, [pc, #96]	; (8000230 <MX_CAN_Init+0x68>)
 80001d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80001d2:	4b16      	ldr	r3, [pc, #88]	; (800022c <MX_CAN_Init+0x64>)
 80001d4:	2210      	movs	r2, #16
 80001d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_SILENT;
 80001d8:	4b14      	ldr	r3, [pc, #80]	; (800022c <MX_CAN_Init+0x64>)
 80001da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80001de:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e0:	4b12      	ldr	r3, [pc, #72]	; (800022c <MX_CAN_Init+0x64>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80001e6:	4b11      	ldr	r3, [pc, #68]	; (800022c <MX_CAN_Init+0x64>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001ec:	4b0f      	ldr	r3, [pc, #60]	; (800022c <MX_CAN_Init+0x64>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <MX_CAN_Init+0x64>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <MX_CAN_Init+0x64>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <MX_CAN_Init+0x64>)
 8000200:	2200      	movs	r2, #0
 8000202:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <MX_CAN_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <MX_CAN_Init+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <MX_CAN_Init+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000216:	4805      	ldr	r0, [pc, #20]	; (800022c <MX_CAN_Init+0x64>)
 8000218:	f001 f836 	bl	8001288 <HAL_CAN_Init>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000222:	f000 fe93 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000002c 	.word	0x2000002c
 8000230:	40006400 	.word	0x40006400

08000234 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08a      	sub	sp, #40	; 0x28
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <HAL_CAN_MspInit+0x80>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d129      	bne.n	80002aa <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <HAL_CAN_MspInit+0x84>)
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <HAL_CAN_MspInit+0x84>)
 800025c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000260:	61d3      	str	r3, [r2, #28]
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <HAL_CAN_MspInit+0x84>)
 8000264:	69db      	ldr	r3, [r3, #28]
 8000266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <HAL_CAN_MspInit+0x84>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <HAL_CAN_MspInit+0x84>)
 8000274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <HAL_CAN_MspInit+0x84>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000286:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800028a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800028c:	2302      	movs	r3, #2
 800028e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000298:	2309      	movs	r3, #9
 800029a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4619      	mov	r1, r3
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f001 fd49 	bl	8001d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	; 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40006400 	.word	0x40006400
 80002b8:	40021000 	.word	0x40021000

080002bc <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <HAL_CAN_MspDeInit+0x34>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d10b      	bne.n	80002e6 <HAL_CAN_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <HAL_CAN_MspDeInit+0x38>)
 80002d0:	69db      	ldr	r3, [r3, #28]
 80002d2:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <HAL_CAN_MspDeInit+0x38>)
 80002d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80002d8:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80002da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f001 fe9d 	bl	8002020 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40006400 	.word	0x40006400
 80002f4:	40021000 	.word	0x40021000

080002f8 <can_set_bit_timing>:
		.TimeSeg1 = CAN_BS1_13TQ,
		.TimeSeg2 = CAN_BS2_2TQ
};

/* set the can bit timing based on baud rate in signal handler */
void can_set_bit_timing(Signal_Handle_t *hsignal, CAN_HandleTypeDef *hcan) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
	switch(hsignal->can_baud) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	891b      	ldrh	r3, [r3, #8]
 8000306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800030a:	f000 80b8 	beq.w	800047e <can_set_bit_timing+0x186>
 800030e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000312:	f300 80c3 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 8000316:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800031a:	f000 80a2 	beq.w	8000462 <can_set_bit_timing+0x16a>
 800031e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000322:	f300 80bb 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 8000326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800032a:	f000 808b 	beq.w	8000444 <can_set_bit_timing+0x14c>
 800032e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000332:	f300 80b3 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 8000336:	2bfa      	cmp	r3, #250	; 0xfa
 8000338:	d075      	beq.n	8000426 <can_set_bit_timing+0x12e>
 800033a:	2bfa      	cmp	r3, #250	; 0xfa
 800033c:	f300 80ae 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 8000340:	2b7d      	cmp	r3, #125	; 0x7d
 8000342:	d061      	beq.n	8000408 <can_set_bit_timing+0x110>
 8000344:	2b7d      	cmp	r3, #125	; 0x7d
 8000346:	f300 80a9 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 800034a:	2b64      	cmp	r3, #100	; 0x64
 800034c:	d04d      	beq.n	80003ea <can_set_bit_timing+0xf2>
 800034e:	2b64      	cmp	r3, #100	; 0x64
 8000350:	f300 80a4 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 8000354:	2b53      	cmp	r3, #83	; 0x53
 8000356:	d039      	beq.n	80003cc <can_set_bit_timing+0xd4>
 8000358:	2b53      	cmp	r3, #83	; 0x53
 800035a:	f300 809f 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 800035e:	2b32      	cmp	r3, #50	; 0x32
 8000360:	d025      	beq.n	80003ae <can_set_bit_timing+0xb6>
 8000362:	2b32      	cmp	r3, #50	; 0x32
 8000364:	f300 809a 	bgt.w	800049c <can_set_bit_timing+0x1a4>
 8000368:	2b0a      	cmp	r3, #10
 800036a:	d002      	beq.n	8000372 <can_set_bit_timing+0x7a>
 800036c:	2b14      	cmp	r3, #20
 800036e:	d00f      	beq.n	8000390 <can_set_bit_timing+0x98>
		hcan->Init.SyncJumpWidth 	= bitRate_1000kbps.SyncJumpWidth;
		hcan->Init.TimeSeg1 		= bitRate_1000kbps.TimeSeg1;
		hcan->Init.TimeSeg2 		= bitRate_1000kbps.TimeSeg2;
		break;
	default:
		break;
 8000370:	e094      	b.n	800049c <can_set_bit_timing+0x1a4>
		hcan->Init.Prescaler 		= bitRate_10kbps.Prescaler;
 8000372:	22c8      	movs	r2, #200	; 0xc8
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_10kbps.SyncJumpWidth;
 8000378:	2200      	movs	r2, #0
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_10kbps.TimeSeg1;
 800037e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_10kbps.TimeSeg2;
 8000386:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	615a      	str	r2, [r3, #20]
		break;
 800038e:	e086      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_20kbps.Prescaler;
 8000390:	2264      	movs	r2, #100	; 0x64
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_20kbps.SyncJumpWidth;
 8000396:	2200      	movs	r2, #0
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_20kbps.TimeSeg1;
 800039c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_20kbps.TimeSeg2;
 80003a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	615a      	str	r2, [r3, #20]
		break;
 80003ac:	e077      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_50kbps.Prescaler;
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_50kbps.SyncJumpWidth;
 80003b4:	2200      	movs	r2, #0
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_50kbps.TimeSeg1;
 80003ba:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_50kbps.TimeSeg2;
 80003c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	615a      	str	r2, [r3, #20]
		break;
 80003ca:	e068      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_83kbps.Prescaler;
 80003cc:	2218      	movs	r2, #24
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_83kbps.SyncJumpWidth;
 80003d2:	2200      	movs	r2, #0
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_83kbps.TimeSeg1;
 80003d8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_83kbps.TimeSeg2;
 80003e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	615a      	str	r2, [r3, #20]
		break;
 80003e8:	e059      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_100kbps.Prescaler;
 80003ea:	2214      	movs	r2, #20
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_100kbps.SyncJumpWidth;
 80003f0:	2200      	movs	r2, #0
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_100kbps.TimeSeg1;
 80003f6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_100kbps.TimeSeg2;
 80003fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	615a      	str	r2, [r3, #20]
		break;
 8000406:	e04a      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_125kbps.Prescaler;
 8000408:	2210      	movs	r2, #16
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_125kbps.SyncJumpWidth;
 800040e:	2200      	movs	r2, #0
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_125kbps.TimeSeg1;
 8000414:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_125kbps.TimeSeg2;
 800041c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	615a      	str	r2, [r3, #20]
		break;
 8000424:	e03b      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_250kbps.Prescaler;
 8000426:	2208      	movs	r2, #8
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_250kbps.SyncJumpWidth;
 800042c:	2200      	movs	r2, #0
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_250kbps.TimeSeg1;
 8000432:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_250kbps.TimeSeg2;
 800043a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	615a      	str	r2, [r3, #20]
		break;
 8000442:	e02c      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_500kbps.Prescaler;
 8000444:	2204      	movs	r2, #4
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_500kbps.SyncJumpWidth;
 800044a:	2200      	movs	r2, #0
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_500kbps.TimeSeg1;
 8000450:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_500kbps.TimeSeg2;
 8000458:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	615a      	str	r2, [r3, #20]
		break;
 8000460:	e01d      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_800kbps.Prescaler;
 8000462:	2204      	movs	r2, #4
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_800kbps.SyncJumpWidth;
 8000468:	2200      	movs	r2, #0
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_800kbps.TimeSeg1;
 800046e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_800kbps.TimeSeg2;
 8000476:	2200      	movs	r2, #0
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	615a      	str	r2, [r3, #20]
		break;
 800047c:	e00f      	b.n	800049e <can_set_bit_timing+0x1a6>
		hcan->Init.Prescaler 		= bitRate_1000kbps.Prescaler;
 800047e:	2202      	movs	r2, #2
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	605a      	str	r2, [r3, #4]
		hcan->Init.SyncJumpWidth 	= bitRate_1000kbps.SyncJumpWidth;
 8000484:	2200      	movs	r2, #0
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	60da      	str	r2, [r3, #12]
		hcan->Init.TimeSeg1 		= bitRate_1000kbps.TimeSeg1;
 800048a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	611a      	str	r2, [r3, #16]
		hcan->Init.TimeSeg2 		= bitRate_1000kbps.TimeSeg2;
 8000492:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	615a      	str	r2, [r3, #20]
		break;
 800049a:	e000      	b.n	800049e <can_set_bit_timing+0x1a6>
		break;
 800049c:	bf00      	nop
	}


}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <signal_init>:
							  16, 17, 18, 19, 20, 21, 22, 23,
							   8,  9, 10, 11, 12, 13, 14, 15,
							   0,  1,  2,  3,  4,  5,  6,  7};

/* initialize signal handle with default values at startup */
void signal_init(Signal_Handle_t *hsignal) {
 80004ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]

//	hsignal->sn = calc_sn();
	hsignal->can_baud = CAN_BAUD;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	22fa      	movs	r2, #250	; 0xfa
 80004ba:	811a      	strh	r2, [r3, #8]
	hsignal->can_id = CAN_ID;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a2c      	ldr	r2, [pc, #176]	; (8000570 <signal_init+0xc4>)
 80004c0:	60da      	str	r2, [r3, #12]
	hsignal->can_type = CAN_ID_TYPE;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	221d      	movs	r2, #29
 80004c6:	729a      	strb	r2, [r3, #10]
	hsignal->endianness = CAN_SIGNAL_ENDIAN;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	220c      	movs	r2, #12
 80004cc:	749a      	strb	r2, [r3, #18]
	hsignal->start_bit = CAN_SIGNAL_START_BIT;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	741a      	strb	r2, [r3, #16]
	hsignal->bit_len = CAN_SIGNAL_BIT_LEN;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2210      	movs	r2, #16
 80004d8:	745a      	strb	r2, [r3, #17]
	hsignal->max = CAN_SIGNAL_MAX;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80004e0:	829a      	strh	r2, [r3, #20]
	hsignal->min = CAN_SIGNAL_MIN;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	82da      	strh	r2, [r3, #22]
	hsignal->dac_out = 0;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	851a      	strh	r2, [r3, #40]	; 0x28
	hsignal->term = TERMINATION_OFF;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]

	HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fe:	f001 fe7b 	bl	80021f8 <HAL_GPIO_WritePin>

	hsignal->mask = 0;
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	f04f 0200 	mov.w	r2, #0
 8000508:	f04f 0300 	mov.w	r3, #0
 800050c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
 8000514:	e021      	b.n	800055a <signal_init+0xae>
		hsignal->mask += 1ULL << i;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800051c:	7bfe      	ldrb	r6, [r7, #15]
 800051e:	f04f 0201 	mov.w	r2, #1
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	f1a6 0e20 	sub.w	lr, r6, #32
 800052a:	f1c6 0c20 	rsb	ip, r6, #32
 800052e:	fa03 f506 	lsl.w	r5, r3, r6
 8000532:	fa02 fe0e 	lsl.w	lr, r2, lr
 8000536:	ea45 050e 	orr.w	r5, r5, lr
 800053a:	fa22 fc0c 	lsr.w	ip, r2, ip
 800053e:	ea45 050c 	orr.w	r5, r5, ip
 8000542:	fa02 f406 	lsl.w	r4, r2, r6
 8000546:	eb10 0804 	adds.w	r8, r0, r4
 800054a:	eb41 0905 	adc.w	r9, r1, r5
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	e9c3 8908 	strd	r8, r9, [r3, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	3301      	adds	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	7c5b      	ldrb	r3, [r3, #17]
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3d8      	bcc.n	8000516 <signal_init+0x6a>
	}
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000570:	18efb400 	.word	0x18efb400

08000574 <signal_update>:

/* new parameters were received, update calculated values */
void signal_update(Signal_Handle_t *hsignal) {
 8000574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000578:	b085      	sub	sp, #20
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]

//	hsignal->sn = calc_sn();	/* esp could send wrong sn so get it again */

	if (hsignal->term == TERMINATION_ON) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7e1b      	ldrb	r3, [r3, #24]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d107      	bne.n	8000596 <signal_update+0x22>
		HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f001 fe32 	bl	80021f8 <HAL_GPIO_WritePin>
 8000594:	e006      	b.n	80005a4 <signal_update+0x30>
	} else {
		HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f001 fe2a 	bl	80021f8 <HAL_GPIO_WritePin>
	}

	hsignal->mask = 0;
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	f04f 0300 	mov.w	r3, #0
 80005ae:	e9c1 2308 	strd	r2, r3, [r1, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e021      	b.n	80005fc <signal_update+0x88>
		hsignal->mask += 1ULL << i;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80005be:	7bfe      	ldrb	r6, [r7, #15]
 80005c0:	f04f 0201 	mov.w	r2, #1
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	f1a6 0e20 	sub.w	lr, r6, #32
 80005cc:	f1c6 0c20 	rsb	ip, r6, #32
 80005d0:	fa03 f506 	lsl.w	r5, r3, r6
 80005d4:	fa02 fe0e 	lsl.w	lr, r2, lr
 80005d8:	ea45 050e 	orr.w	r5, r5, lr
 80005dc:	fa22 fc0c 	lsr.w	ip, r2, ip
 80005e0:	ea45 050c 	orr.w	r5, r5, ip
 80005e4:	fa02 f406 	lsl.w	r4, r2, r6
 80005e8:	eb10 0804 	adds.w	r8, r0, r4
 80005ec:	eb41 0905 	adc.w	r9, r1, r5
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	e9c3 8908 	strd	r8, r9, [r3, #32]
	for (uint8_t i=0; i<hsignal->bit_len; i++) {
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	3301      	adds	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	7c5b      	ldrb	r3, [r3, #17]
 8000600:	7bfa      	ldrb	r2, [r7, #15]
 8000602:	429a      	cmp	r2, r3
 8000604:	d3d8      	bcc.n	80005b8 <signal_update+0x44>
	}
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000612 <map>:

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 8000612:	b480      	push	{r7}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	69b9      	ldr	r1, [r7, #24]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	1a8a      	subs	r2, r1, r2
 800062c:	fb02 f203 	mul.w	r2, r2, r3
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1acb      	subs	r3, r1, r3
 8000636:	fbb2 f2f3 	udiv	r2, r2, r3
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	4413      	add	r3, r2
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <nibble_swap>:

void nibble_swap(uint64_t *val) {
 800064a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	uint64_t high_nibbles = (*val >> 4) & 0x0F0F0F0F0F0F0F0F;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	0902      	lsrs	r2, r0, #4
 8000664:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8000668:	090b      	lsrs	r3, r1, #4
 800066a:	f04f 300f 	mov.w	r0, #252645135	; 0xf0f0f0f
 800066e:	f04f 310f 	mov.w	r1, #252645135	; 0xf0f0f0f
 8000672:	ea02 0a00 	and.w	sl, r2, r0
 8000676:	ea03 0b01 	and.w	fp, r3, r1
 800067a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	uint64_t low_nibbles  = (*val)      & 0x0F0F0F0F0F0F0F0F;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000684:	f04f 300f 	mov.w	r0, #252645135	; 0xf0f0f0f
 8000688:	f04f 310f 	mov.w	r1, #252645135	; 0xf0f0f0f
 800068c:	ea02 0800 	and.w	r8, r2, r0
 8000690:	ea03 0901 	and.w	r9, r3, r1
 8000694:	e9c7 8902 	strd	r8, r9, [r7, #8]

	*val = (low_nibbles << 4) | high_nibbles;
 8000698:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800069c:	f04f 0200 	mov.w	r2, #0
 80006a0:	f04f 0300 	mov.w	r3, #0
 80006a4:	010b      	lsls	r3, r1, #4
 80006a6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80006aa:	0102      	lsls	r2, r0, #4
 80006ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80006b0:	ea42 0400 	orr.w	r4, r2, r0
 80006b4:	ea43 0501 	orr.w	r5, r3, r1
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	e9c3 4500 	strd	r4, r5, [r3]
}
 80006be:	bf00      	nop
 80006c0:	371c      	adds	r7, #28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80006c8:	4770      	bx	lr
	...

080006cc <signal_calc>:

/* get signal from frame and set DAC output */
void signal_calc(Signal_Handle_t *hsignal) {
 80006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d0:	b091      	sub	sp, #68	; 0x44
 80006d2:	af02      	add	r7, sp, #8
 80006d4:	6278      	str	r0, [r7, #36]	; 0x24
	uint64_t temp = 0;
 80006d6:	f04f 0200 	mov.w	r2, #0
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (hsignal->endianness == SIGNAL_LITTLE_ENDIAN) {
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	7c9b      	ldrb	r3, [r3, #18]
 80006e6:	2b0c      	cmp	r3, #12
 80006e8:	d14e      	bne.n	8000788 <signal_calc+0xbc>
		for (uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006f0:	e02a      	b.n	8000748 <signal_calc+0x7c>
			temp += ((uint64_t) hsignal->frame[i] << (i * 8));
 80006f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f8:	5cd3      	ldrb	r3, [r2, r3]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000704:	00c9      	lsls	r1, r1, #3
 8000706:	f1a1 0420 	sub.w	r4, r1, #32
 800070a:	f1c1 0020 	rsb	r0, r1, #32
 800070e:	fa03 fb01 	lsl.w	fp, r3, r1
 8000712:	fa02 f404 	lsl.w	r4, r2, r4
 8000716:	ea4b 0b04 	orr.w	fp, fp, r4
 800071a:	fa22 f000 	lsr.w	r0, r2, r0
 800071e:	ea4b 0b00 	orr.w	fp, fp, r0
 8000722:	fa02 fa01 	lsl.w	sl, r2, r1
 8000726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800072a:	eb1a 0102 	adds.w	r1, sl, r2
 800072e:	6139      	str	r1, [r7, #16]
 8000730:	eb4b 0303 	adc.w	r3, fp, r3
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800073a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		for (uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 800073e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000742:	3301      	adds	r3, #1
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b07      	cmp	r3, #7
 800074e:	d9d0      	bls.n	80006f2 <signal_calc+0x26>
		}

		temp = temp >> hsignal->start_bit;
 8000750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000756:	7c09      	ldrb	r1, [r1, #16]
 8000758:	f1c1 0420 	rsb	r4, r1, #32
 800075c:	f1a1 0020 	sub.w	r0, r1, #32
 8000760:	fa22 f501 	lsr.w	r5, r2, r1
 8000764:	61bd      	str	r5, [r7, #24]
 8000766:	fa03 f404 	lsl.w	r4, r3, r4
 800076a:	69bd      	ldr	r5, [r7, #24]
 800076c:	4325      	orrs	r5, r4
 800076e:	61bd      	str	r5, [r7, #24]
 8000770:	fa23 f000 	lsr.w	r0, r3, r0
 8000774:	69bc      	ldr	r4, [r7, #24]
 8000776:	4304      	orrs	r4, r0
 8000778:	61bc      	str	r4, [r7, #24]
 800077a:	40cb      	lsrs	r3, r1
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000782:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000786:	e055      	b.n	8000834 <signal_calc+0x168>
	} else {
        for(uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800078e:	e02c      	b.n	80007ea <signal_calc+0x11e>
        	temp += ((uint64_t)hsignal->frame[i] << (56 - (i * 8)));
 8000790:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80007a2:	f1c1 0107 	rsb	r1, r1, #7
 80007a6:	00c9      	lsls	r1, r1, #3
 80007a8:	f1a1 0420 	sub.w	r4, r1, #32
 80007ac:	f1c1 0020 	rsb	r0, r1, #32
 80007b0:	fa03 f901 	lsl.w	r9, r3, r1
 80007b4:	fa02 f404 	lsl.w	r4, r2, r4
 80007b8:	ea49 0904 	orr.w	r9, r9, r4
 80007bc:	fa22 f000 	lsr.w	r0, r2, r0
 80007c0:	ea49 0900 	orr.w	r9, r9, r0
 80007c4:	fa02 f801 	lsl.w	r8, r2, r1
 80007c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80007cc:	eb18 0102 	adds.w	r1, r8, r2
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	eb49 0303 	adc.w	r3, r9, r3
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80007dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        for(uint8_t i=0; i<sizeof(hsignal->frame); i++) {
 80007e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007e4:	3301      	adds	r3, #1
 80007e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80007ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	d9ce      	bls.n	8000790 <signal_calc+0xc4>
        }

        /* swap nibbles for signals that are not 8 bit aligned */
        nibble_swap(&temp);
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff27 	bl	800064a <nibble_swap>

        /* shift to signal data */
        temp = temp >> be_shift[hsignal->start_bit];
 80007fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000802:	7c09      	ldrb	r1, [r1, #16]
 8000804:	4608      	mov	r0, r1
 8000806:	4921      	ldr	r1, [pc, #132]	; (800088c <signal_calc+0x1c0>)
 8000808:	5c09      	ldrb	r1, [r1, r0]
 800080a:	f1c1 0420 	rsb	r4, r1, #32
 800080e:	f1a1 0020 	sub.w	r0, r1, #32
 8000812:	fa22 f501 	lsr.w	r5, r2, r1
 8000816:	fa03 f404 	lsl.w	r4, r3, r4
 800081a:	4325      	orrs	r5, r4
 800081c:	fa23 f000 	lsr.w	r0, r3, r0
 8000820:	4305      	orrs	r5, r0
 8000822:	fa23 f601 	lsr.w	r6, r3, r1
 8000826:	e9c7 560a 	strd	r5, r6, [r7, #40]	; 0x28

        /* return nibbles to original position */
        nibble_swap(&temp);
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff0b 	bl	800064a <nibble_swap>
	}

	temp &= hsignal->mask;
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800083a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800083e:	ea00 0402 	and.w	r4, r0, r2
 8000842:	603c      	str	r4, [r7, #0]
 8000844:	400b      	ands	r3, r1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	e9d7 3400 	ldrd	r3, r4, [r7]
 800084c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	hsignal->value = (uint16_t) temp;
 8000850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000854:	b292      	uxth	r2, r2
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	835a      	strh	r2, [r3, #26]

	hsignal->dac_out = (uint16_t) map(hsignal->value, hsignal->min, hsignal->max, 0, 4095);
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	8b5b      	ldrh	r3, [r3, #26]
 800085e:	4618      	mov	r0, r3
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	8adb      	ldrh	r3, [r3, #22]
 8000864:	4619      	mov	r1, r3
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	8a9b      	ldrh	r3, [r3, #20]
 800086a:	461a      	mov	r2, r3
 800086c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	f7ff fecd 	bl	8000612 <map>
 8000878:	4603      	mov	r3, r0
 800087a:	b29a      	uxth	r2, r3
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000880:	bf00      	nop
 8000882:	373c      	adds	r7, #60	; 0x3c
 8000884:	46bd      	mov	sp, r7
 8000886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800088a:	bf00      	nop
 800088c:	080042e0 	.word	0x080042e0

08000890 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_DAC_Init+0x4c>)
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_DAC_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_DAC_Init+0x4c>)
 80008a8:	f001 f983 	bl	8001bb2 <HAL_DAC_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80008b2:	f000 fb4b 	bl	8000f4c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_DAC_Init+0x4c>)
 80008c6:	f001 f9ec 	bl	8001ca2 <HAL_DAC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80008d0:	f000 fb3c 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000054 	.word	0x20000054
 80008e0:	40007400 	.word	0x40007400

080008e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a15      	ldr	r2, [pc, #84]	; (8000958 <HAL_DAC_MspInit+0x74>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d124      	bne.n	8000950 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_DAC_MspInit+0x78>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <HAL_DAC_MspInit+0x78>)
 800090c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_DAC_MspInit+0x78>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_DAC_MspInit+0x78>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_DAC_MspInit+0x78>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_DAC_MspInit+0x78>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000936:	2310      	movs	r3, #16
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093a:	2303      	movs	r3, #3
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f001 f9f6 	bl	8001d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40007400 	.word	0x40007400
 800095c:	40021000 	.word	0x40021000

08000960 <calc_sn>:
 */

#include "device_sn.h"

/* use the 96bit unique device ID to calculate a device SN for use with SSID unique name */
uint32_t calc_sn(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
	uint32_t uid[] = {HAL_GetUIDw0(), HAL_GetUIDw1(), HAL_GetUIDw2()};
 8000966:	f000 fc6b 	bl	8001240 <HAL_GetUIDw0>
 800096a:	4603      	mov	r3, r0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	f000 fc73 	bl	8001258 <HAL_GetUIDw1>
 8000972:	4603      	mov	r3, r0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	f000 fc7b 	bl	8001270 <HAL_GetUIDw2>
 800097a:	4603      	mov	r3, r0
 800097c:	60bb      	str	r3, [r7, #8]

	selectionSort(uid, 3);
 800097e:	463b      	mov	r3, r7
 8000980:	2103      	movs	r1, #3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f820 	bl	80009c8 <selectionSort>
	uint32_t sn = uid[2] - uid[1] - uid[0];
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	1ad2      	subs	r2, r2, r3
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	60fb      	str	r3, [r7, #12]

	return sn;
 8000994:	68fb      	ldr	r3, [r7, #12]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <swap>:

/* below functions modified from https://www.geeksforgeeks.org/c-program-to-sort-an-array-in-ascending-order/ */
void swap(uint32_t* xp, uint32_t* yp) {
 800099e:	b480      	push	{r7}
 80009a0:	b085      	sub	sp, #20
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
	uint32_t temp = *xp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
    *xp = *yp;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
    *yp = temp;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <selectionSort>:

// Function to perform Selection Sort
void selectionSort(uint32_t arr[], uint32_t n) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	uint32_t i, j, min_idx;

    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e028      	b.n	8000a2a <selectionSort+0x62>

        // Find the minimum element in unsorted array
        min_idx = i;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	60fb      	str	r3, [r7, #12]
        for (j = i + 1; j < n; j++)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3301      	adds	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	e010      	b.n	8000a06 <selectionSort+0x3e>
            if (arr[j] < arr[min_idx])
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	440b      	add	r3, r1
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d201      	bcs.n	8000a00 <selectionSort+0x38>
                min_idx = j;
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	60fb      	str	r3, [r7, #12]
        for (j = i + 1; j < n; j++)
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	3301      	adds	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3ea      	bcc.n	80009e4 <selectionSort+0x1c>

        // Swap the found minimum element
        // with the first element
        swap(&arr[min_idx], &arr[i]);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	18d0      	adds	r0, r2, r3
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f7ff ffbd 	bl	800099e <swap>
    for (i = 0; i < n - 1; i++) {
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	3301      	adds	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3d1      	bcc.n	80009d8 <selectionSort+0x10>
    }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <MX_GPIO_Init+0xdc>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <MX_GPIO_Init+0xdc>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <MX_GPIO_Init+0xdc>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <MX_GPIO_Init+0xdc>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <MX_GPIO_Init+0xdc>)
 8000a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_GPIO_Init+0xdc>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_RDY_Pin|CAN_LED_Pin|SPI_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f241 0138 	movw	r1, #4152	; 0x1038
 8000a8c:	4824      	ldr	r0, [pc, #144]	; (8000b20 <MX_GPIO_Init+0xe0>)
 8000a8e:	f001 fbb3 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_TERM_Pin|TP1_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f001 fbac 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = V_B0_Pin|V_B1_Pin|V_B2_Pin;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481b      	ldr	r0, [pc, #108]	; (8000b20 <MX_GPIO_Init+0xe0>)
 8000ab4:	f001 f942 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_RDY_Pin|CAN_LED_Pin|SPI_LED_Pin|ERROR_LED_Pin;
 8000ab8:	f241 0338 	movw	r3, #4152	; 0x1038
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_GPIO_Init+0xe0>)
 8000ad2:	f001 f933 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f001 f925 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAN_TERM_Pin|TP1_Pin;
 8000af2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f001 f915 	bl	8001d3c <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400

08000b24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b2a:	f000 fb23 	bl	8001174 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b2e:	f000 f99f 	bl	8000e70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b32:	f7ff ff85 	bl	8000a40 <MX_GPIO_Init>
	MX_CAN_Init();
 8000b36:	f7ff fb47 	bl	80001c8 <MX_CAN_Init>
	MX_DAC_Init();
 8000b3a:	f7ff fea9 	bl	8000890 <MX_DAC_Init>
	MX_SPI2_Init();
 8000b3e:	f000 fa11 	bl	8000f64 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	sn = calc_sn();
 8000b42:	f7ff ff0d 	bl	8000960 <calc_sn>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4abc      	ldr	r2, [pc, #752]	; (8000e3c <main+0x318>)
 8000b4a:	6013      	str	r3, [r2, #0]

	signal_init(&signal); /* initialize signal to default values */
 8000b4c:	48bc      	ldr	r0, [pc, #752]	; (8000e40 <main+0x31c>)
 8000b4e:	f7ff fcad 	bl	80004ac <signal_init>

	can_filter_init(&hcan, &canFilter);
 8000b52:	49bc      	ldr	r1, [pc, #752]	; (8000e44 <main+0x320>)
 8000b54:	48bc      	ldr	r0, [pc, #752]	; (8000e48 <main+0x324>)
 8000b56:	f000 f9cc 	bl	8000ef2 <can_filter_init>

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000b5a:	48bb      	ldr	r0, [pc, #748]	; (8000e48 <main+0x324>)
 8000b5c:	f000 fd7c 	bl	8001658 <HAL_CAN_Start>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <main+0x46>
		Error_Handler();
 8000b66:	f000 f9f1 	bl	8000f4c <Error_Handler>
	}

	/* set DAC */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	48b6      	ldr	r0, [pc, #728]	; (8000e4c <main+0x328>)
 8000b72:	f001 f840 	bl	8001bf6 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000b76:	2100      	movs	r1, #0
 8000b78:	48b4      	ldr	r0, [pc, #720]	; (8000e4c <main+0x328>)
 8000b7a:	f001 f85b 	bl	8001c34 <HAL_DAC_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* SPI Check ---------------------------------------------------------*/
		if (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == 0) { /* esp8266 wants to talk */
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f001 fb1f 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 8101 	bne.w	8000d94 <main+0x270>
			HAL_GPIO_WritePin(SPI_LED_GPIO_Port, SPI_LED_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	48ae      	ldr	r0, [pc, #696]	; (8000e50 <main+0x32c>)
 8000b98:	f001 fb2e 	bl	80021f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SPI2_RDY_GPIO_Port, SPI2_RDY_Pin, GPIO_PIN_RESET); /* signal to esp8266 we are ready to talk */
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	48ab      	ldr	r0, [pc, #684]	; (8000e50 <main+0x32c>)
 8000ba4:	f001 fb28 	bl	80021f8 <HAL_GPIO_WritePin>

			uint8_t command_bit = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
			if (HAL_SPI_Receive(&hspi2, &command_bit, sizeof(command_bit), 2) != HAL_OK) {
 8000bac:	1df9      	adds	r1, r7, #7
 8000bae:	2302      	movs	r3, #2
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	48a8      	ldr	r0, [pc, #672]	; (8000e54 <main+0x330>)
 8000bb4:	f002 fe59 	bl	800386a <HAL_SPI_Receive>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <main+0x9e>
				Error_Handler();
 8000bbe:	f000 f9c5 	bl	8000f4c <Error_Handler>
			}

			switch (command_bit) {
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	3b3d      	subs	r3, #61	; 0x3d
 8000bc6:	2b16      	cmp	r3, #22
 8000bc8:	f200 80c0 	bhi.w	8000d4c <main+0x228>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <main+0xb0>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000c4b 	.word	0x08000c4b
 8000bd8:	08000d4d 	.word	0x08000d4d
 8000bdc:	08000c31 	.word	0x08000c31
 8000be0:	08000d4d 	.word	0x08000d4d
 8000be4:	08000d4d 	.word	0x08000d4d
 8000be8:	08000d4d 	.word	0x08000d4d
 8000bec:	08000d35 	.word	0x08000d35
 8000bf0:	08000d1d 	.word	0x08000d1d
 8000bf4:	08000d4d 	.word	0x08000d4d
 8000bf8:	08000cd5 	.word	0x08000cd5
 8000bfc:	08000d4d 	.word	0x08000d4d
 8000c00:	08000ced 	.word	0x08000ced
 8000c04:	08000d4d 	.word	0x08000d4d
 8000c08:	08000d4d 	.word	0x08000d4d
 8000c0c:	08000d4d 	.word	0x08000d4d
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d4d 	.word	0x08000d4d
 8000c18:	08000cbd 	.word	0x08000cbd
 8000c1c:	08000d4d 	.word	0x08000d4d
 8000c20:	08000d4d 	.word	0x08000d4d
 8000c24:	08000d4d 	.word	0x08000d4d
 8000c28:	08000d4d 	.word	0x08000d4d
 8000c2c:	08000d05 	.word	0x08000d05
			case SPI_SIGNAL_SEND: /* esp is requesting parameters */
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal, sizeof(Signal_Handle_t), 5) != HAL_OK) {
 8000c30:	2305      	movs	r3, #5
 8000c32:	2230      	movs	r2, #48	; 0x30
 8000c34:	4982      	ldr	r1, [pc, #520]	; (8000e40 <main+0x31c>)
 8000c36:	4887      	ldr	r0, [pc, #540]	; (8000e54 <main+0x330>)
 8000c38:	f002 fca9 	bl	800358e <HAL_SPI_Transmit>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8086 	beq.w	8000d50 <main+0x22c>
					Error_Handler();
 8000c44:	f000 f982 	bl	8000f4c <Error_Handler>
				}
				break;
 8000c48:	e082      	b.n	8000d50 <main+0x22c>
			case SPI_SIGNAL_RECEIVE: /* esp is sending new parameters*/
				if (HAL_SPI_Receive(&hspi2, (uint8_t*) &signal, sizeof(Signal_Handle_t), 5) != HAL_OK) {
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	2230      	movs	r2, #48	; 0x30
 8000c4e:	497c      	ldr	r1, [pc, #496]	; (8000e40 <main+0x31c>)
 8000c50:	4880      	ldr	r0, [pc, #512]	; (8000e54 <main+0x330>)
 8000c52:	f002 fe0a 	bl	800386a <HAL_SPI_Receive>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <main+0x13c>
					Error_Handler();
 8000c5c:	f000 f976 	bl	8000f4c <Error_Handler>
				}

				signal_update(&signal); /* recalculate signal values */
 8000c60:	4877      	ldr	r0, [pc, #476]	; (8000e40 <main+0x31c>)
 8000c62:	f7ff fc87 	bl	8000574 <signal_update>
				/* restart CAN interface with new baud rate -----------------------*/
				if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 8000c66:	4878      	ldr	r0, [pc, #480]	; (8000e48 <main+0x324>)
 8000c68:	f000 fd3a 	bl	80016e0 <HAL_CAN_Stop>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <main+0x152>
					Error_Handler();
 8000c72:	f000 f96b 	bl	8000f4c <Error_Handler>
				}
				/* stop CAN and deinit so we can configure it */
				if (HAL_CAN_DeInit(&hcan) != HAL_OK) {
 8000c76:	4874      	ldr	r0, [pc, #464]	; (8000e48 <main+0x324>)
 8000c78:	f000 fc01 	bl	800147e <HAL_CAN_DeInit>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <main+0x162>
					Error_Handler();
 8000c82:	f000 f963 	bl	8000f4c <Error_Handler>
				}
				/* set new bit timing */
				can_set_bit_timing(&signal, &hcan);
 8000c86:	4970      	ldr	r1, [pc, #448]	; (8000e48 <main+0x324>)
 8000c88:	486d      	ldr	r0, [pc, #436]	; (8000e40 <main+0x31c>)
 8000c8a:	f7ff fb35 	bl	80002f8 <can_set_bit_timing>
				/* reinitialize CAN */
				if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000c8e:	486e      	ldr	r0, [pc, #440]	; (8000e48 <main+0x324>)
 8000c90:	f000 fafa 	bl	8001288 <HAL_CAN_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <main+0x17a>
					Error_Handler();
 8000c9a:	f000 f957 	bl	8000f4c <Error_Handler>
				}
				/* restart can */
				if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000c9e:	486a      	ldr	r0, [pc, #424]	; (8000e48 <main+0x324>)
 8000ca0:	f000 fcda 	bl	8001658 <HAL_CAN_Start>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <main+0x18a>
					Error_Handler();
 8000caa:	f000 f94f 	bl	8000f4c <Error_Handler>
				}
				/* set DAC to zero */
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4865      	ldr	r0, [pc, #404]	; (8000e4c <main+0x328>)
 8000cb6:	f000 ff9e 	bl	8001bf6 <HAL_DAC_SetValue>
				break;
 8000cba:	e056      	b.n	8000d6a <main+0x246>
			case SPI_SEND_SN:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &sn, sizeof(sn), 5) != HAL_OK) {
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	495e      	ldr	r1, [pc, #376]	; (8000e3c <main+0x318>)
 8000cc2:	4864      	ldr	r0, [pc, #400]	; (8000e54 <main+0x330>)
 8000cc4:	f002 fc63 	bl	800358e <HAL_SPI_Transmit>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d042      	beq.n	8000d54 <main+0x230>
					Error_Handler();
 8000cce:	f000 f93d 	bl	8000f4c <Error_Handler>
				}
				break;
 8000cd2:	e03f      	b.n	8000d54 <main+0x230>
			case SPI_SEND_FW_VERSION:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) FW_VERSION, sizeof(FW_VERSION), 5) != HAL_OK) {
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	2209      	movs	r2, #9
 8000cd8:	495f      	ldr	r1, [pc, #380]	; (8000e58 <main+0x334>)
 8000cda:	485e      	ldr	r0, [pc, #376]	; (8000e54 <main+0x330>)
 8000cdc:	f002 fc57 	bl	800358e <HAL_SPI_Transmit>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d038      	beq.n	8000d58 <main+0x234>
					Error_Handler();
 8000ce6:	f000 f931 	bl	8000f4c <Error_Handler>
				}
				break;
 8000cea:	e035      	b.n	8000d58 <main+0x234>
			case SPI_SEND_HW_VERSION:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) HW_VERSION, sizeof(HW_VERSION), 5) != HAL_OK) {
 8000cec:	2305      	movs	r3, #5
 8000cee:	2209      	movs	r2, #9
 8000cf0:	495a      	ldr	r1, [pc, #360]	; (8000e5c <main+0x338>)
 8000cf2:	4858      	ldr	r0, [pc, #352]	; (8000e54 <main+0x330>)
 8000cf4:	f002 fc4b 	bl	800358e <HAL_SPI_Transmit>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d02e      	beq.n	8000d5c <main+0x238>
					Error_Handler();
 8000cfe:	f000 f925 	bl	8000f4c <Error_Handler>
				}
				break;
 8000d02:	e02b      	b.n	8000d5c <main+0x238>
			case SPI_SEND_CAN_SIGNAL:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal.value, sizeof(signal.value), 5) != HAL_OK) {
 8000d04:	2305      	movs	r3, #5
 8000d06:	2202      	movs	r2, #2
 8000d08:	4955      	ldr	r1, [pc, #340]	; (8000e60 <main+0x33c>)
 8000d0a:	4852      	ldr	r0, [pc, #328]	; (8000e54 <main+0x330>)
 8000d0c:	f002 fc3f 	bl	800358e <HAL_SPI_Transmit>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d024      	beq.n	8000d60 <main+0x23c>
					Error_Handler();
 8000d16:	f000 f919 	bl	8000f4c <Error_Handler>
				}
				break;
 8000d1a:	e021      	b.n	8000d60 <main+0x23c>
			case SPI_SEND_DAC_VALUE:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal.dac_out, sizeof(signal.dac_out), 5) != HAL_OK) {
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	2202      	movs	r2, #2
 8000d20:	4950      	ldr	r1, [pc, #320]	; (8000e64 <main+0x340>)
 8000d22:	484c      	ldr	r0, [pc, #304]	; (8000e54 <main+0x330>)
 8000d24:	f002 fc33 	bl	800358e <HAL_SPI_Transmit>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d01a      	beq.n	8000d64 <main+0x240>
					Error_Handler();
 8000d2e:	f000 f90d 	bl	8000f4c <Error_Handler>
				}
				break;
 8000d32:	e017      	b.n	8000d64 <main+0x240>
			case SPI_SEND_CAN_FRAME:
				if (HAL_SPI_Transmit(&hspi2, (uint8_t*) &signal.frame, sizeof(signal.frame), 5) != HAL_OK) {
 8000d34:	2305      	movs	r3, #5
 8000d36:	2208      	movs	r2, #8
 8000d38:	4941      	ldr	r1, [pc, #260]	; (8000e40 <main+0x31c>)
 8000d3a:	4846      	ldr	r0, [pc, #280]	; (8000e54 <main+0x330>)
 8000d3c:	f002 fc27 	bl	800358e <HAL_SPI_Transmit>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d010      	beq.n	8000d68 <main+0x244>
					Error_Handler();
 8000d46:	f000 f901 	bl	8000f4c <Error_Handler>
				}
				break;
 8000d4a:	e00d      	b.n	8000d68 <main+0x244>
			default:
				break;
 8000d4c:	bf00      	nop
 8000d4e:	e00c      	b.n	8000d6a <main+0x246>
				break;
 8000d50:	bf00      	nop
 8000d52:	e00a      	b.n	8000d6a <main+0x246>
				break;
 8000d54:	bf00      	nop
 8000d56:	e008      	b.n	8000d6a <main+0x246>
				break;
 8000d58:	bf00      	nop
 8000d5a:	e006      	b.n	8000d6a <main+0x246>
				break;
 8000d5c:	bf00      	nop
 8000d5e:	e004      	b.n	8000d6a <main+0x246>
				break;
 8000d60:	bf00      	nop
 8000d62:	e002      	b.n	8000d6a <main+0x246>
				break;
 8000d64:	bf00      	nop
 8000d66:	e000      	b.n	8000d6a <main+0x246>
				break;
 8000d68:	bf00      	nop
			}

			HAL_GPIO_WritePin(SPI2_RDY_GPIO_Port, SPI2_RDY_Pin, GPIO_PIN_SET); /* return ready pin to high */
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d70:	4837      	ldr	r0, [pc, #220]	; (8000e50 <main+0x32c>)
 8000d72:	f001 fa41 	bl	80021f8 <HAL_GPIO_WritePin>

			while (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == 0) {
 8000d76:	bf00      	nop
 8000d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f001 fa22 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f6      	beq.n	8000d78 <main+0x254>
				; /* loop until esp8266 pulls CS high */
			}
			HAL_GPIO_WritePin(SPI_LED_GPIO_Port, SPI_LED_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	4830      	ldr	r0, [pc, #192]	; (8000e50 <main+0x32c>)
 8000d90:	f001 fa32 	bl	80021f8 <HAL_GPIO_WritePin>
		}

		/* CAN ---------------------------------------------------------------*/
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8000d94:	2100      	movs	r1, #0
 8000d96:	482c      	ldr	r0, [pc, #176]	; (8000e48 <main+0x324>)
 8000d98:	f000 fdfd 	bl	8001996 <HAL_CAN_GetRxFifoFillLevel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d045      	beq.n	8000e2e <main+0x30a>
			if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canRxHeader, canRxBuffer) != HAL_OK) {
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <main+0x344>)
 8000da4:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <main+0x348>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4827      	ldr	r0, [pc, #156]	; (8000e48 <main+0x324>)
 8000daa:	f000 fce2 	bl	8001772 <HAL_CAN_GetRxMessage>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <main+0x294>
				Error_Handler();
 8000db4:	f000 f8ca 	bl	8000f4c <Error_Handler>
			} // end HAL_CAN_GetRxMessage

			switch (signal.can_type) {
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <main+0x31c>)
 8000dba:	7a9b      	ldrb	r3, [r3, #10]
 8000dbc:	2b0b      	cmp	r3, #11
 8000dbe:	d002      	beq.n	8000dc6 <main+0x2a2>
 8000dc0:	2b1d      	cmp	r3, #29
 8000dc2:	d01a      	beq.n	8000dfa <main+0x2d6>
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, signal.dac_out);
					HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
				}
				break;
			default:
				break;
 8000dc4:	e038      	b.n	8000e38 <main+0x314>
				if (canRxHeader.StdId == signal.can_id) {
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <main+0x348>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <main+0x31c>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d12f      	bne.n	8000e32 <main+0x30e>
					memcpy(signal.frame, canRxBuffer, sizeof(signal.frame));
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <main+0x31c>)
 8000dd4:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <main+0x344>)
 8000dd6:	6810      	ldr	r0, [r2, #0]
 8000dd8:	6851      	ldr	r1, [r2, #4]
 8000dda:	c303      	stmia	r3!, {r0, r1}
					signal_calc(&signal);
 8000ddc:	4818      	ldr	r0, [pc, #96]	; (8000e40 <main+0x31c>)
 8000dde:	f7ff fc75 	bl	80006cc <signal_calc>
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, signal.dac_out);
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <main+0x31c>)
 8000de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	4818      	ldr	r0, [pc, #96]	; (8000e4c <main+0x328>)
 8000dec:	f000 ff03 	bl	8001bf6 <HAL_DAC_SetValue>
					HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
 8000df0:	2108      	movs	r1, #8
 8000df2:	4817      	ldr	r0, [pc, #92]	; (8000e50 <main+0x32c>)
 8000df4:	f001 fa18 	bl	8002228 <HAL_GPIO_TogglePin>
				break;
 8000df8:	e01b      	b.n	8000e32 <main+0x30e>
				if (canRxHeader.ExtId == signal.can_id) {
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <main+0x348>)
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <main+0x31c>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d117      	bne.n	8000e36 <main+0x312>
					memcpy(signal.frame, canRxBuffer, sizeof(signal.frame));
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <main+0x31c>)
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <main+0x344>)
 8000e0a:	6810      	ldr	r0, [r2, #0]
 8000e0c:	6851      	ldr	r1, [r2, #4]
 8000e0e:	c303      	stmia	r3!, {r0, r1}
					signal_calc(&signal);
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <main+0x31c>)
 8000e12:	f7ff fc5b 	bl	80006cc <signal_calc>
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, signal.dac_out);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <main+0x31c>)
 8000e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480b      	ldr	r0, [pc, #44]	; (8000e4c <main+0x328>)
 8000e20:	f000 fee9 	bl	8001bf6 <HAL_DAC_SetValue>
					HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
 8000e24:	2108      	movs	r1, #8
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <main+0x32c>)
 8000e28:	f001 f9fe 	bl	8002228 <HAL_GPIO_TogglePin>
				break;
 8000e2c:	e003      	b.n	8000e36 <main+0x312>
			} // end switch(signal.can_type)
		} // end HAL_CAN_GetRxFifoFillLevel
 8000e2e:	bf00      	nop
 8000e30:	e6a5      	b.n	8000b7e <main+0x5a>
				break;
 8000e32:	bf00      	nop
 8000e34:	e6a3      	b.n	8000b7e <main+0x5a>
				break;
 8000e36:	bf00      	nop
		if (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == 0) { /* esp8266 wants to talk */
 8000e38:	e6a1      	b.n	8000b7e <main+0x5a>
 8000e3a:	bf00      	nop
 8000e3c:	200000d4 	.word	0x200000d4
 8000e40:	200000f8 	.word	0x200000f8
 8000e44:	20000128 	.word	0x20000128
 8000e48:	2000002c 	.word	0x2000002c
 8000e4c:	20000054 	.word	0x20000054
 8000e50:	48000400 	.word	0x48000400
 8000e54:	20000070 	.word	0x20000070
 8000e58:	080042c8 	.word	0x080042c8
 8000e5c:	080042d4 	.word	0x080042d4
 8000e60:	20000112 	.word	0x20000112
 8000e64:	20000120 	.word	0x20000120
 8000e68:	20000068 	.word	0x20000068
 8000e6c:	200000d8 	.word	0x200000d8

08000e70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b090      	sub	sp, #64	; 0x40
 8000e74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	2228      	movs	r2, #40	; 0x28
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fa0e 	bl	80042a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ea6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 f9d3 	bl	800225c <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x50>
		Error_Handler();
 8000ebc:	f000 f846 	bl	8000f4c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 f8c6 	bl	800306c <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x7a>
		Error_Handler();
 8000ee6:	f000 f831 	bl	8000f4c <Error_Handler>
	}
}
 8000eea:	bf00      	nop
 8000eec:	3740      	adds	r7, #64	; 0x40
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <can_filter_init>:

/* USER CODE BEGIN 4 */
void can_filter_init(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *canFilter) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
	canFilter->FilterBank = 0;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
	canFilter->FilterMode = CAN_FILTERMODE_IDMASK;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	canFilter->FilterScale = CAN_FILTERSCALE_32BIT;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	61da      	str	r2, [r3, #28]
	canFilter->FilterIdHigh = 0;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
	canFilter->FilterIdLow = 0;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
	canFilter->FilterMaskIdHigh = 0;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
	canFilter->FilterMaskIdLow = 0;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
	canFilter->FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
	canFilter->FilterActivation = ENABLE;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	621a      	str	r2, [r3, #32]

	if (HAL_CAN_ConfigFilter(hcan, canFilter) != HAL_OK) {
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 fac5 	bl	80014c4 <HAL_CAN_ConfigFilter>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <can_filter_init+0x52>
		Error_Handler();
 8000f40:	f000 f804 	bl	8000f4c <Error_Handler>
	}
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2120      	movs	r1, #32
 8000f58:	4801      	ldr	r0, [pc, #4]	; (8000f60 <Error_Handler+0x14>)
 8000f5a:	f001 f94d 	bl	80021f8 <HAL_GPIO_WritePin>
	while (1) {
 8000f5e:	e7fe      	b.n	8000f5e <Error_Handler+0x12>
 8000f60:	48000400 	.word	0x48000400

08000f64 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <MX_SPI2_Init+0x70>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000faa:	2207      	movs	r2, #7
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_SPI2_Init+0x6c>)
 8000fbc:	f002 fa3c 	bl	8003438 <HAL_SPI_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000fc6:	f7ff ffc1 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000070 	.word	0x20000070
 8000fd4:	40003800 	.word	0x40003800

08000fd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_SPI_MspInit+0x7c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d128      	bne.n	800104c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a16      	ldr	r2, [pc, #88]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800102a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103c:	2305      	movs	r3, #5
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_SPI_MspInit+0x84>)
 8001048:	f000 fe78 	bl	8001d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40003800 	.word	0x40003800
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_MspInit+0x44>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <HAL_MspInit+0x44>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_MspInit+0x44>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_MspInit+0x44>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x44>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x44>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <NMI_Handler+0x4>

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f884 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114a:	f7ff ffd7 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f003 f883 	bl	8004258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001152:	f7ff fce7 	bl	8000b24 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001158:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001164:	08004358 	.word	0x08004358
  ldr r2, =_sbss
 8001168:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800116c:	20000154 	.word	0x20000154

08001170 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_IRQHandler>
	...

08001174 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x28>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x28>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 fce1 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff ff66 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fceb 	bl	8001b9a <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011dc:	f000 fcc1 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	20000150 	.word	0x20000150

08001228 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;  
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000150 	.word	0x20000150

08001240 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetUIDw0+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	1ffff7ac 	.word	0x1ffff7ac

08001258 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetUIDw1+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	1ffff7b0 	.word	0x1ffff7b0

08001270 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetUIDw2+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	1ffff7b4 	.word	0x1ffff7b4

08001288 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0ed      	b.n	8001476 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7fe ffc4 	bl	8000234 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0202 	bic.w	r2, r2, #2
 80012ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012bc:	f7ff ffb4 	bl	8001228 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012c2:	e012      	b.n	80012ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012c4:	f7ff ffb0 	bl	8001228 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b0a      	cmp	r3, #10
 80012d0:	d90b      	bls.n	80012ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2205      	movs	r2, #5
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0c5      	b.n	8001476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1e5      	bne.n	80012c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff ff8e 	bl	8001228 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800130e:	e012      	b.n	8001336 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001310:	f7ff ff8a 	bl	8001228 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b0a      	cmp	r3, #10
 800131c:	d90b      	bls.n	8001336 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2205      	movs	r2, #5
 800132e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e09f      	b.n	8001476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0e5      	beq.n	8001310 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7e1b      	ldrb	r3, [r3, #24]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e007      	b.n	800136e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e5b      	ldrb	r3, [r3, #25]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d108      	bne.n	8001388 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e007      	b.n	8001398 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001396:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7e9b      	ldrb	r3, [r3, #26]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d108      	bne.n	80013b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0220 	orr.w	r2, r2, #32
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e007      	b.n	80013c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0220 	bic.w	r2, r2, #32
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7edb      	ldrb	r3, [r3, #27]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0210 	bic.w	r2, r2, #16
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0210 	orr.w	r2, r2, #16
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7f1b      	ldrb	r3, [r3, #28]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0208 	orr.w	r2, r2, #8
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0208 	bic.w	r2, r2, #8
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7f5b      	ldrb	r3, [r3, #29]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0204 	orr.w	r2, r2, #4
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e007      	b.n	8001440 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0204 	bic.w	r2, r2, #4
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	ea42 0103 	orr.w	r1, r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e015      	b.n	80014bc <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f925 	bl	80016e0 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7fe ff10 	bl	80002bc <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014aa:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d003      	beq.n	80014ea <HAL_CAN_ConfigFilter+0x26>
 80014e2:	7cfb      	ldrb	r3, [r7, #19]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	f040 80aa 	bne.w	800163e <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2201      	movs	r2, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	401a      	ands	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d123      	bne.n	800156c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001546:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3248      	adds	r2, #72	; 0x48
 800154c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001560:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	3348      	adds	r3, #72	; 0x48
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d122      	bne.n	80015ba <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001594:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3248      	adds	r2, #72	; 0x48
 800159a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015b0:	6979      	ldr	r1, [r7, #20]
 80015b2:	3348      	adds	r3, #72	; 0x48
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	401a      	ands	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	431a      	orrs	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001600:	e007      	b.n	8001612 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	431a      	orrs	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001630:	f023 0201 	bic.w	r2, r3, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e006      	b.n	800164c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d12e      	bne.n	80016ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fdd0 	bl	8001228 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800168a:	e012      	b.n	80016b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800168c:	f7ff fdcc 	bl	8001228 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d90b      	bls.n	80016b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e012      	b.n	80016d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e5      	bne.n	800168c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e006      	b.n	80016d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d133      	bne.n	800175c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fd90 	bl	8001228 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800170a:	e012      	b.n	8001732 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170c:	f7ff fd8c 	bl	8001228 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90b      	bls.n	8001732 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e01b      	b.n	800176a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0e5      	beq.n	800170c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0202 	bic.w	r2, r2, #2
 800174e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e006      	b.n	800176a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
  }
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001772:	b480      	push	{r7}
 8001774:	b087      	sub	sp, #28
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001786:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d003      	beq.n	8001796 <HAL_CAN_GetRxMessage+0x24>
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b02      	cmp	r3, #2
 8001792:	f040 80f3 	bne.w	800197c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10e      	bne.n	80017ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0e7      	b.n	800198a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0d8      	b.n	800198a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	331b      	adds	r3, #27
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0204 	and.w	r2, r3, #4
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	331b      	adds	r3, #27
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0d5b      	lsrs	r3, r3, #21
 8001806:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e00b      	b.n	8001828 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	331b      	adds	r3, #27
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	331b      	adds	r3, #27
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0202 	and.w	r2, r3, #2
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	331b      	adds	r3, #27
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4413      	add	r3, r2
 800184a:	3304      	adds	r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	331b      	adds	r3, #27
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	b2da      	uxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	331b      	adds	r3, #27
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0a1a      	lsrs	r2, r3, #8
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0c1a      	lsrs	r2, r3, #16
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3302      	adds	r3, #2
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0e1a      	lsrs	r2, r3, #24
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3303      	adds	r3, #3
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3304      	adds	r3, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0a1a      	lsrs	r2, r3, #8
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3305      	adds	r3, #5
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4413      	add	r3, r2
 8001926:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0c1a      	lsrs	r2, r3, #16
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3306      	adds	r3, #6
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4413      	add	r3, r2
 8001940:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0e1a      	lsrs	r2, r3, #24
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	3307      	adds	r3, #7
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	e007      	b.n	8001978 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e006      	b.n	800198a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019aa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d002      	beq.n	80019b8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d10f      	bne.n	80019d8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	e005      	b.n	80019d8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80019d8:	68fb      	ldr	r3, [r7, #12]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff47 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff5c 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffb0 	bl	8001b08 <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e014      	b.n	8001bee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	791b      	ldrb	r3, [r3, #4]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7fe fe85 	bl	80008e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001bf6:	b480      	push	{r7}
 8001bf8:	b087      	sub	sp, #28
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d104      	bne.n	8001c1e <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	461a      	mov	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_DAC_Start+0x16>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e025      	b.n	8001c96 <HAL_DAC_Start+0x62>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	409a      	lsls	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001c74:	2b3c      	cmp	r3, #60	; 0x3c
 8001c76:	d107      	bne.n	8001c88 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	795b      	ldrb	r3, [r3, #5]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_DAC_ConfigChannel+0x20>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e036      	b.n	8001d30 <HAL_DAC_ConfigChannel+0x8e>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001cd6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	22c0      	movs	r2, #192	; 0xc0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	400a      	ands	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e14e      	b.n	8001fea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8140 	beq.w	8001fe4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d00b      	beq.n	8001d84 <HAL_GPIO_Init+0x48>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d78:	2b11      	cmp	r3, #17
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b12      	cmp	r3, #18
 8001d82:	d130      	bne.n	8001de6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	f003 0201 	and.w	r2, r3, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0xea>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d123      	bne.n	8001e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	6939      	ldr	r1, [r7, #16]
 8001e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0203 	and.w	r2, r3, #3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 809a 	beq.w	8001fe4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb0:	4b55      	ldr	r3, [pc, #340]	; (8002008 <HAL_GPIO_Init+0x2cc>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x2cc>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HAL_GPIO_Init+0x2cc>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec8:	4a50      	ldr	r2, [pc, #320]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef2:	d013      	beq.n	8001f1c <HAL_GPIO_Init+0x1e0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a46      	ldr	r2, [pc, #280]	; (8002010 <HAL_GPIO_Init+0x2d4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00d      	beq.n	8001f18 <HAL_GPIO_Init+0x1dc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a45      	ldr	r2, [pc, #276]	; (8002014 <HAL_GPIO_Init+0x2d8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x1d8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a44      	ldr	r2, [pc, #272]	; (8002018 <HAL_GPIO_Init+0x2dc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_GPIO_Init+0x1d4>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x1e2>
 8001f10:	2305      	movs	r3, #5
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x1e2>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x1e2>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x1e2>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f2e:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3c:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f60:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f47f aea9 	bne.w	8001d4c <HAL_GPIO_Init+0x10>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40021000 	.word	0x40021000
 800200c:	40010000 	.word	0x40010000
 8002010:	48000400 	.word	0x48000400
 8002014:	48000800 	.word	0x48000800
 8002018:	48000c00 	.word	0x48000c00
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800202e:	e0b2      	b.n	8002196 <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a5 	beq.w	8002190 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002046:	4a5b      	ldr	r2, [pc, #364]	; (80021b4 <HAL_GPIO_DeInit+0x194>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206e:	d013      	beq.n	8002098 <HAL_GPIO_DeInit+0x78>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_GPIO_DeInit+0x198>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_DeInit+0x74>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_GPIO_DeInit+0x19c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_DeInit+0x70>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_DeInit+0x1a0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_DeInit+0x6c>
 8002088:	2303      	movs	r3, #3
 800208a:	e006      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 800208c:	2305      	movs	r3, #5
 800208e:	e004      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d132      	bne.n	8002110 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4944      	ldr	r1, [pc, #272]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4940      	ldr	r1, [pc, #256]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020c6:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	493d      	ldr	r1, [pc, #244]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020d4:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	4939      	ldr	r1, [pc, #228]	; (80021c4 <HAL_GPIO_DeInit+0x1a4>)
 80020de:	4013      	ands	r3, r2
 80020e0:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_GPIO_DeInit+0x194>)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43da      	mvns	r2, r3
 8002102:	482c      	ldr	r0, [pc, #176]	; (80021b4 <HAL_GPIO_DeInit+0x194>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	400a      	ands	r2, r1
 800210a:	3302      	adds	r3, #2
 800210c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2103      	movs	r1, #3
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	401a      	ands	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	08d2      	lsrs	r2, r2, #3
 8002146:	4019      	ands	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2103      	movs	r1, #3
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	2101      	movs	r1, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	401a      	ands	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2103      	movs	r1, #3
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f47f af46 	bne.w	8002030 <HAL_GPIO_DeInit+0x10>
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	48000800 	.word	0x48000800
 80021c0:	48000c00 	.word	0x48000c00
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002214:	e002      	b.n	800221c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43d9      	mvns	r1, r3
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	400b      	ands	r3, r1
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002262:	af00      	add	r7, sp, #0
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	f000 bef4 	b.w	800305e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 816a 	beq.w	800255a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002286:	4bb3      	ldr	r3, [pc, #716]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d00c      	beq.n	80022ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002292:	4bb0      	ldr	r3, [pc, #704]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d159      	bne.n	8002352 <HAL_RCC_OscConfig+0xf6>
 800229e:	4bad      	ldr	r3, [pc, #692]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022aa:	d152      	bne.n	8002352 <HAL_RCC_OscConfig+0xf6>
 80022ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_RCC_OscConfig+0x82>
 80022d8:	4b9e      	ldr	r3, [pc, #632]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0xae>
 80022de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002306:	4b93      	ldr	r3, [pc, #588]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002312:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002316:	fa92 f2a2 	rbit	r2, r2
 800231a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800231e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002322:	fab2 f282 	clz	r2, r2
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f042 0220 	orr.w	r2, r2, #32
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	f002 021f 	and.w	r2, r2, #31
 8002332:	2101      	movs	r1, #1
 8002334:	fa01 f202 	lsl.w	r2, r1, r2
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 810c 	beq.w	8002558 <HAL_RCC_OscConfig+0x2fc>
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8106 	bne.w	8002558 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f000 be86 	b.w	800305e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x110>
 800235e:	4b7d      	ldr	r3, [pc, #500]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7c      	ldr	r2, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e030      	b.n	80023ce <HAL_RCC_OscConfig+0x172>
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x134>
 8002376:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a76      	ldr	r2, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 800237c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a73      	ldr	r2, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e01e      	b.n	80023ce <HAL_RCC_OscConfig+0x172>
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x15a>
 800239c:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6c      	ldr	r2, [pc, #432]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a69      	ldr	r2, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e00b      	b.n	80023ce <HAL_RCC_OscConfig+0x172>
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a66      	ldr	r2, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b64      	ldr	r3, [pc, #400]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a63      	ldr	r2, [pc, #396]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ce:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f023 020f 	bic.w	r2, r3, #15
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	495d      	ldr	r1, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d059      	beq.n	80024a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff1c 	bl	8001228 <HAL_GetTick>
 80023f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f6:	f7fe ff17 	bl	8001228 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d902      	bls.n	800240c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	f000 be29 	b.w	800305e <HAL_RCC_OscConfig+0xe02>
 800240c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002410:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002420:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d102      	bne.n	800243e <HAL_RCC_OscConfig+0x1e2>
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e015      	b.n	800246a <HAL_RCC_OscConfig+0x20e>
 800243e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002442:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002456:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800245a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002472:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800247e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ab      	beq.n	80023f6 <HAL_RCC_OscConfig+0x19a>
 800249e:	e05c      	b.n	800255a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fec2 	bl	8001228 <HAL_GetTick>
 80024a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024aa:	f7fe febd 	bl	8001228 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d902      	bls.n	80024c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f000 bdcf 	b.w	800305e <HAL_RCC_OscConfig+0xe02>
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0x296>
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x2c2>
 80024f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800250e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_RCC_OscConfig+0x2f8>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002522:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002526:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800252a:	fa92 f2a2 	rbit	r2, r2
 800252e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002532:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002536:	fab2 f282 	clz	r2, r2
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f002 021f 	and.w	r2, r2, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ab      	bne.n	80024aa <HAL_RCC_OscConfig+0x24e>
 8002552:	e002      	b.n	800255a <HAL_RCC_OscConfig+0x2fe>
 8002554:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 816f 	beq.w	8002848 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800256a:	4bd0      	ldr	r3, [pc, #832]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002576:	4bcd      	ldr	r3, [pc, #820]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d16c      	bne.n	800265c <HAL_RCC_OscConfig+0x400>
 8002582:	4bca      	ldr	r3, [pc, #808]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d166      	bne.n	800265c <HAL_RCC_OscConfig+0x400>
 800258e:	2302      	movs	r3, #2
 8002590:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80025a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0x362>
 80025b8:	4bbc      	ldr	r3, [pc, #752]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	e013      	b.n	80025e6 <HAL_RCC_OscConfig+0x38a>
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025d0:	2302      	movs	r3, #2
 80025d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025e2:	4bb2      	ldr	r3, [pc, #712]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2202      	movs	r2, #2
 80025e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025f0:	fa92 f2a2 	rbit	r2, r2
 80025f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f002 021f 	and.w	r2, r2, #31
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_RCC_OscConfig+0x3cc>
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d002      	beq.n	8002628 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f000 bd1b 	b.w	800305e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	21f8      	movs	r1, #248	; 0xf8
 8002638:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002640:	fa91 f1a1 	rbit	r1, r1
 8002644:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002648:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800264c:	fab1 f181 	clz	r1, r1
 8002650:	b2c9      	uxtb	r1, r1
 8002652:	408b      	lsls	r3, r1
 8002654:	4995      	ldr	r1, [pc, #596]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e0f5      	b.n	8002848 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8085 	beq.w	8002772 <HAL_RCC_OscConfig+0x516>
 8002668:	2301      	movs	r3, #1
 800266a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800267a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	461a      	mov	r2, r3
 8002690:	2301      	movs	r3, #1
 8002692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fdc8 	bl	8001228 <HAL_GetTick>
 8002698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe fdc3 	bl	8001228 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	f000 bcd5 	b.w	800305e <HAL_RCC_OscConfig+0xe02>
 80026b4:	2302      	movs	r3, #2
 80026b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_OscConfig+0x488>
 80026de:	4b73      	ldr	r3, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	e013      	b.n	800270c <HAL_RCC_OscConfig+0x4b0>
 80026e4:	2302      	movs	r3, #2
 80026e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026f6:	2302      	movs	r3, #2
 80026f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2202      	movs	r2, #2
 800270e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002712:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002716:	fa92 f2a2 	rbit	r2, r2
 800271a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800271e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002722:	fab2 f282 	clz	r2, r2
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f042 0220 	orr.w	r2, r2, #32
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f002 021f 	and.w	r2, r2, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f202 	lsl.w	r2, r1, r2
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0af      	beq.n	800269e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b5b      	ldr	r3, [pc, #364]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	21f8      	movs	r1, #248	; 0xf8
 800274e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002756:	fa91 f1a1 	rbit	r1, r1
 800275a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800275e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002762:	fab1 f181 	clz	r1, r1
 8002766:	b2c9      	uxtb	r1, r1
 8002768:	408b      	lsls	r3, r1
 800276a:	4950      	ldr	r1, [pc, #320]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	e06a      	b.n	8002848 <HAL_RCC_OscConfig+0x5ec>
 8002772:	2301      	movs	r3, #1
 8002774:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002784:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002792:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	461a      	mov	r2, r3
 800279a:	2300      	movs	r3, #0
 800279c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe fd43 	bl	8001228 <HAL_GetTick>
 80027a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe fd3e 	bl	8001228 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d902      	bls.n	80027be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	f000 bc50 	b.w	800305e <HAL_RCC_OscConfig+0xe02>
 80027be:	2302      	movs	r3, #2
 80027c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_OscConfig+0x592>
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	e013      	b.n	8002816 <HAL_RCC_OscConfig+0x5ba>
 80027ee:	2302      	movs	r3, #2
 80027f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002800:	2302      	movs	r3, #2
 8002802:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002806:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x650>)
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2202      	movs	r2, #2
 8002818:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800281c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002820:	fa92 f2a2 	rbit	r2, r2
 8002824:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002828:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800282c:	fab2 f282 	clz	r2, r2
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f042 0220 	orr.w	r2, r2, #32
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	f002 021f 	and.w	r2, r2, #31
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1af      	bne.n	80027a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80da 	beq.w	8002a0c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d069      	beq.n	8002936 <HAL_RCC_OscConfig+0x6da>
 8002862:	2301      	movs	r3, #1
 8002864:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x654>)
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7fe fccc 	bl	8001228 <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002894:	e00e      	b.n	80028b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002896:	f7fe fcc7 	bl	8001228 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d906      	bls.n	80028b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e3d9      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	10908120 	.word	0x10908120
 80028b4:	2302      	movs	r3, #2
 80028b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028ca:	2202      	movs	r2, #2
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028e2:	2202      	movs	r2, #2
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4ba5      	ldr	r3, [pc, #660]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 80028f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028fe:	2102      	movs	r1, #2
 8002900:	6019      	str	r1, [r3, #0]
 8002902:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f1a3 	rbit	r1, r3
 800290c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002910:	6019      	str	r1, [r3, #0]
  return result;
 8002912:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0b0      	beq.n	8002896 <HAL_RCC_OscConfig+0x63a>
 8002934:	e06a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7b0>
 8002936:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800294c:	601a      	str	r2, [r3, #0]
  return result;
 800294e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002952:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	4b8c      	ldr	r3, [pc, #560]	; (8002b90 <HAL_RCC_OscConfig+0x934>)
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	2300      	movs	r3, #0
 8002966:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fe fc5e 	bl	8001228 <HAL_GetTick>
 800296c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	e009      	b.n	8002986 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002972:	f7fe fc59 	bl	8001228 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e36b      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
 8002986:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029a2:	2202      	movs	r2, #2
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029ba:	2202      	movs	r2, #2
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f2a3 	rbit	r2, r3
 80029c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ce:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 80029d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029d6:	2102      	movs	r1, #2
 80029d8:	6019      	str	r1, [r3, #0]
 80029da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f1a3 	rbit	r1, r3
 80029e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029e8:	6019      	str	r1, [r3, #0]
  return result;
 80029ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1b2      	bne.n	8002972 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8158 	beq.w	8002ccc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d112      	bne.n	8002a54 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]
 8002a3a:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f107 0308 	add.w	r3, r7, #8
 8002a4c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCC_OscConfig+0x938>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11a      	bne.n	8002a96 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x938>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <HAL_RCC_OscConfig+0x938>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fbdc 	bl	8001228 <HAL_GetTick>
 8002a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e009      	b.n	8002a8a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fbd7 	bl	8001228 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e2e9      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_RCC_OscConfig+0x938>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ef      	beq.n	8002a76 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x852>
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4a39      	ldr	r2, [pc, #228]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6213      	str	r3, [r2, #32]
 8002aac:	e02f      	b.n	8002b0e <HAL_RCC_OscConfig+0x8b2>
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x876>
 8002ab8:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	6213      	str	r3, [r2, #32]
 8002ac4:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002aca:	f023 0304 	bic.w	r3, r3, #4
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	e01d      	b.n	8002b0e <HAL_RCC_OscConfig+0x8b2>
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x89a>
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x8b2>
 8002af6:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6213      	str	r3, [r2, #32]
 8002b02:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a21      	ldr	r2, [pc, #132]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d06b      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7fe fb86 	bl	8001228 <HAL_GetTick>
 8002b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e00b      	b.n	8002b3a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fb81 	bl	8001228 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e291      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
 8002b3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b3e:	2202      	movs	r2, #2
 8002b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b56:	2202      	movs	r2, #2
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f2a3 	rbit	r2, r3
 8002b64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b68:	601a      	str	r2, [r3, #0]
  return result;
 8002b6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f043 0302 	orr.w	r3, r3, #2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d109      	bne.n	8002b98 <HAL_RCC_OscConfig+0x93c>
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <HAL_RCC_OscConfig+0x930>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	e014      	b.n	8002bb4 <HAL_RCC_OscConfig+0x958>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	10908120 	.word	0x10908120
 8002b94:	40007000 	.word	0x40007000
 8002b98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	4bbb      	ldr	r3, [pc, #748]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bb8:	2102      	movs	r1, #2
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	fa92 f1a2 	rbit	r1, r2
 8002bc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bca:	6011      	str	r1, [r2, #0]
  return result;
 8002bcc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d099      	beq.n	8002b22 <HAL_RCC_OscConfig+0x8c6>
 8002bee:	e063      	b.n	8002cb8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fb1a 	bl	8001228 <HAL_GetTick>
 8002bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	e00b      	b.n	8002c12 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fb15 	bl	8001228 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e225      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
 8002c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c16:	2202      	movs	r2, #2
 8002c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c2e:	2202      	movs	r2, #2
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c40:	601a      	str	r2, [r3, #0]
  return result;
 8002c42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_OscConfig+0xa06>
 8002c5c:	4b90      	ldr	r3, [pc, #576]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	e00d      	b.n	8002c7e <HAL_RCC_OscConfig+0xa22>
 8002c62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c66:	2202      	movs	r2, #2
 8002c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	4b89      	ldr	r3, [pc, #548]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c82:	2102      	movs	r1, #2
 8002c84:	6011      	str	r1, [r2, #0]
 8002c86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	fa92 f1a2 	rbit	r1, r2
 8002c90:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c94:	6011      	str	r1, [r2, #0]
  return result;
 8002c96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f002 021f 	and.w	r2, r2, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1a0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b77      	ldr	r3, [pc, #476]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	4a76      	ldr	r2, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 81c2 	beq.w	800305c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd8:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	f000 819c 	beq.w	800301e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	f040 8114 	bne.w	8002f1a <HAL_RCC_OscConfig+0xcbe>
 8002cf2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d0a:	601a      	str	r2, [r3, #0]
  return result;
 8002d0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	461a      	mov	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe fa7e 	bl	8001228 <HAL_GetTick>
 8002d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	e009      	b.n	8002d46 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fa79 	bl	8001228 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e18b      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
 8002d46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d5e:	601a      	str	r2, [r3, #0]
  return result;
 8002d60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d102      	bne.n	8002d80 <HAL_RCC_OscConfig+0xb24>
 8002d7a:	4b49      	ldr	r3, [pc, #292]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	e01b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb5c>
 8002d80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dc0:	6011      	str	r1, [r2, #0]
 8002dc2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	fa92 f1a2 	rbit	r1, r2
 8002dcc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dd0:	6011      	str	r1, [r2, #0]
  return result;
 8002dd2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	fab2 f282 	clz	r2, r2
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	f042 0220 	orr.w	r2, r2, #32
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f002 021f 	and.w	r2, r2, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f202 	lsl.w	r2, r1, r2
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d19e      	bne.n	8002d32 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
 8002e10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e28:	601a      	str	r2, [r3, #0]
  return result;
 8002e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e2e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	461a      	mov	r2, r3
 8002e42:	2301      	movs	r3, #1
 8002e44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe f9ef 	bl	8001228 <HAL_GetTick>
 8002e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4e:	e009      	b.n	8002e64 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe f9ea 	bl	8001228 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0fc      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
 8002e64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e7c:	601a      	str	r2, [r3, #0]
  return result;
 8002e7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xc48>
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <HAL_RCC_OscConfig+0xc44>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	e01e      	b.n	8002edc <HAL_RCC_OscConfig+0xc80>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_OscConfig+0xe0c>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ee0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	fa92 f1a2 	rbit	r1, r2
 8002ef0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ef4:	6011      	str	r1, [r2, #0]
  return result;
 8002ef6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	fab2 f282 	clz	r2, r2
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	f042 0220 	orr.w	r2, r2, #32
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	f002 021f 	and.w	r2, r2, #31
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d09b      	beq.n	8002e50 <HAL_RCC_OscConfig+0xbf4>
 8002f18:	e0a0      	b.n	800305c <HAL_RCC_OscConfig+0xe00>
 8002f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f2a3 	rbit	r2, r3
 8002f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f32:	601a      	str	r2, [r3, #0]
  return result;
 8002f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe f96a 	bl	8001228 <HAL_GetTick>
 8002f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fe f965 	bl	8001228 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e077      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
 8002f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f86:	601a      	str	r2, [r3, #0]
  return result;
 8002f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xd4c>
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_RCC_OscConfig+0xe0c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e01b      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd84>
 8002fa8:	f107 0320 	add.w	r3, r7, #32
 8002fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f107 0320 	add.w	r3, r7, #32
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f107 0318 	add.w	r3, r7, #24
 8002fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f107 0318 	add.w	r3, r7, #24
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_OscConfig+0xe0c>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f107 0210 	add.w	r2, r7, #16
 8002fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fe8:	6011      	str	r1, [r2, #0]
 8002fea:	f107 0210 	add.w	r2, r7, #16
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	fa92 f1a2 	rbit	r1, r2
 8002ff4:	f107 020c 	add.w	r2, r7, #12
 8002ff8:	6011      	str	r1, [r2, #0]
  return result;
 8002ffa:	f107 020c 	add.w	r2, r7, #12
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f002 021f 	and.w	r2, r2, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f202 	lsl.w	r2, r1, r2
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d19e      	bne.n	8002f5a <HAL_RCC_OscConfig+0xcfe>
 800301c:	e01e      	b.n	800305c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e018      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_RCC_OscConfig+0xe0c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003034:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	429a      	cmp	r2, r3
 8003044:	d108      	bne.n	8003058 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003046:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800304a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b09e      	sub	sp, #120	; 0x78
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e162      	b.n	800334a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b90      	ldr	r3, [pc, #576]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d910      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b8d      	ldr	r3, [pc, #564]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	498b      	ldr	r1, [pc, #556]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b89      	ldr	r3, [pc, #548]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e14a      	b.n	800334a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b82      	ldr	r3, [pc, #520]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	497f      	ldr	r1, [pc, #508]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80dc 	beq.w	8003298 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d13c      	bne.n	8003162 <HAL_RCC_ClockConfig+0xf6>
 80030e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <HAL_RCC_ClockConfig+0xa6>
 800310c:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	e00f      	b.n	8003132 <HAL_RCC_ClockConfig+0xc6>
 8003112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003116:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	667b      	str	r3, [r7, #100]	; 0x64
 8003120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003124:	663b      	str	r3, [r7, #96]	; 0x60
 8003126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312e:	4b67      	ldr	r3, [pc, #412]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003136:	65ba      	str	r2, [r7, #88]	; 0x58
 8003138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800313a:	fa92 f2a2 	rbit	r2, r2
 800313e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003140:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003142:	fab2 f282 	clz	r2, r2
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f042 0220 	orr.w	r2, r2, #32
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f002 021f 	and.w	r2, r2, #31
 8003152:	2101      	movs	r1, #1
 8003154:	fa01 f202 	lsl.w	r2, r1, r2
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d17b      	bne.n	8003256 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0f3      	b.n	800334a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d13c      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x178>
 800316a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d102      	bne.n	8003194 <HAL_RCC_ClockConfig+0x128>
 800318e:	4b4f      	ldr	r3, [pc, #316]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	e00f      	b.n	80031b4 <HAL_RCC_ClockConfig+0x148>
 8003194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	647b      	str	r3, [r7, #68]	; 0x44
 80031a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
 80031a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b0:	4b46      	ldr	r3, [pc, #280]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80031ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031bc:	fa92 f2a2 	rbit	r2, r2
 80031c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d13a      	bne.n	8003256 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0b2      	b.n	800334a <HAL_RCC_ClockConfig+0x2de>
 80031e4:	2302      	movs	r3, #2
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d102      	bne.n	800320c <HAL_RCC_ClockConfig+0x1a0>
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	e00d      	b.n	8003228 <HAL_RCC_ClockConfig+0x1bc>
 800320c:	2302      	movs	r3, #2
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2202      	movs	r2, #2
 800322a:	61ba      	str	r2, [r7, #24]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	fa92 f2a2 	rbit	r2, r2
 8003232:	617a      	str	r2, [r7, #20]
  return result;
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f042 0220 	orr.w	r2, r2, #32
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f002 021f 	and.w	r2, r2, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e079      	b.n	800334a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	491a      	ldr	r1, [pc, #104]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fd ffde 	bl	8001228 <HAL_GetTick>
 800326c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fd ffda 	bl	8001228 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e061      	b.n	800334a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d214      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0207 	bic.w	r2, r3, #7
 80032ae:	4906      	ldr	r1, [pc, #24]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e040      	b.n	800334a <HAL_RCC_ClockConfig+0x2de>
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCC_ClockConfig+0x2e8>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	491a      	ldr	r1, [pc, #104]	; (8003354 <HAL_RCC_ClockConfig+0x2e8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_RCC_ClockConfig+0x2e8>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4912      	ldr	r1, [pc, #72]	; (8003354 <HAL_RCC_ClockConfig+0x2e8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800330e:	f000 f829 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003312:	4601      	mov	r1, r0
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_RCC_ClockConfig+0x2e8>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331c:	22f0      	movs	r2, #240	; 0xf0
 800331e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	fa92 f2a2 	rbit	r2, r2
 8003326:	60fa      	str	r2, [r7, #12]
  return result;
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	fab2 f282 	clz	r2, r2
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	40d3      	lsrs	r3, r2
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x2ec>)
 8003334:	5cd3      	ldrb	r3, [r2, r3]
 8003336:	fa21 f303 	lsr.w	r3, r1, r3
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_RCC_ClockConfig+0x2f0>)
 800333c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCC_ClockConfig+0x2f4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd ff2c 	bl	80011a0 <HAL_InitTick>
  
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3778      	adds	r7, #120	; 0x78
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	08004320 	.word	0x08004320
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004

08003364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b08b      	sub	sp, #44	; 0x2c
 8003368:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800337e:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x30>
 800338e:	2b08      	cmp	r3, #8
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x36>
 8003392:	e03c      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003396:	623b      	str	r3, [r7, #32]
      break;
 8003398:	e03c      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	fa92 f2a2 	rbit	r2, r2
 80033ac:	607a      	str	r2, [r7, #4]
  return result;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	fab2 f282 	clz	r2, r2
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	40d3      	lsrs	r3, r2
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033be:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	220f      	movs	r2, #15
 80033c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	fa92 f2a2 	rbit	r2, r2
 80033d0:	60fa      	str	r2, [r7, #12]
  return result;
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	fab2 f282 	clz	r2, r2
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	40d3      	lsrs	r3, r2
 80033dc:	4a14      	ldr	r2, [pc, #80]	; (8003430 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033de:	5cd3      	ldrb	r3, [r2, r3]
 80033e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033ec:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
 80033fc:	e004      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	623b      	str	r3, [r7, #32]
      break;
 800340c:	e002      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003410:	623b      	str	r3, [r7, #32]
      break;
 8003412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003414:	6a3b      	ldr	r3, [r7, #32]
}
 8003416:	4618      	mov	r0, r3
 8003418:	372c      	adds	r7, #44	; 0x2c
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	007a1200 	.word	0x007a1200
 800342c:	08004330 	.word	0x08004330
 8003430:	08004340 	.word	0x08004340
 8003434:	003d0900 	.word	0x003d0900

08003438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e09d      	b.n	8003586 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345a:	d009      	beq.n	8003470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
 8003462:	e005      	b.n	8003470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fda4 	bl	8000fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b0:	d902      	bls.n	80034b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e002      	b.n	80034be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034c6:	d007      	beq.n	80034d8 <HAL_SPI_Init+0xa0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	f003 0204 	and.w	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003554:	ea42 0103 	orr.w	r1, r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b088      	sub	sp, #32
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_SPI_Transmit+0x22>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e158      	b.n	8003862 <HAL_SPI_Transmit+0x2d4>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b8:	f7fd fe36 	bl	8001228 <HAL_GetTick>
 80035bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d002      	beq.n	80035d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d2:	e13d      	b.n	8003850 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x52>
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035e4:	e134      	b.n	8003850 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003630:	d10f      	bne.n	8003652 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003650:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d007      	beq.n	8003670 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003678:	d94b      	bls.n	8003712 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0xfa>
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d13e      	bne.n	8003706 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036ac:	e02b      	b.n	8003706 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d112      	bne.n	80036e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	881a      	ldrh	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036e0:	e011      	b.n	8003706 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e2:	f7fd fda1 	bl	8001228 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d803      	bhi.n	80036fa <HAL_SPI_Transmit+0x16c>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_Transmit+0x172>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003704:	e0a4      	b.n	8003850 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ce      	bne.n	80036ae <HAL_SPI_Transmit+0x120>
 8003710:	e07c      	b.n	800380c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_SPI_Transmit+0x192>
 800371a:	8afb      	ldrh	r3, [r7, #22]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d170      	bne.n	8003802 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d912      	bls.n	8003750 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	881a      	ldrh	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	1c9a      	adds	r2, r3, #2
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b02      	subs	r3, #2
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800374e:	e058      	b.n	8003802 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	7812      	ldrb	r2, [r2, #0]
 800375c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003776:	e044      	b.n	8003802 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d12b      	bne.n	80037de <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d912      	bls.n	80037b6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	1c9a      	adds	r2, r3, #2
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b02      	subs	r3, #2
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b4:	e025      	b.n	8003802 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037dc:	e011      	b.n	8003802 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037de:	f7fd fd23 	bl	8001228 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d803      	bhi.n	80037f6 <HAL_SPI_Transmit+0x268>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f4:	d102      	bne.n	80037fc <HAL_SPI_Transmit+0x26e>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003800:	e026      	b.n	8003850 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1b5      	bne.n	8003778 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fcdb 	bl	80041cc <SPI_EndRxTxTransaction>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e000      	b.n	8003850 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800384e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003860:	7ffb      	ldrb	r3, [r7, #31]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b088      	sub	sp, #32
 800386e:	af02      	add	r7, sp, #8
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003886:	d112      	bne.n	80038ae <HAL_SPI_Receive+0x44>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10e      	bne.n	80038ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2204      	movs	r2, #4
 8003894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f910 	bl	8003aca <HAL_SPI_TransmitReceive>
 80038aa:	4603      	mov	r3, r0
 80038ac:	e109      	b.n	8003ac2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_SPI_Receive+0x52>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e102      	b.n	8003ac2 <HAL_SPI_Receive+0x258>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c4:	f7fd fcb0 	bl	8001228 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038da:	e0e9      	b.n	8003ab0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_SPI_Receive+0x7e>
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038ec:	e0e0      	b.n	8003ab0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2204      	movs	r2, #4
 80038f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003938:	d908      	bls.n	800394c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	e007      	b.n	800395c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800395a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003964:	d10f      	bne.n	8003986 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003974:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003984:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d007      	beq.n	80039a4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ac:	d867      	bhi.n	8003a7e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039ae:	e030      	b.n	8003a12 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d117      	bne.n	80039ee <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f103 020c 	add.w	r2, r3, #12
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80039ec:	e011      	b.n	8003a12 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ee:	f7fd fc1b 	bl	8001228 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d803      	bhi.n	8003a06 <HAL_SPI_Receive+0x19c>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a04:	d102      	bne.n	8003a0c <HAL_SPI_Receive+0x1a2>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a10:	e04e      	b.n	8003ab0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1c8      	bne.n	80039b0 <HAL_SPI_Receive+0x146>
 8003a1e:	e034      	b.n	8003a8a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a58:	e011      	b.n	8003a7e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a5a:	f7fd fbe5 	bl	8001228 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d803      	bhi.n	8003a72 <HAL_SPI_Receive+0x208>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_Receive+0x20e>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a7c:	e018      	b.n	8003ab0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1ca      	bne.n	8003a20 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb44 	bl	800411c <SPI_EndRxTransaction>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
 8003aac:	e000      	b.n	8003ab0 <HAL_SPI_Receive+0x246>
  }

error :
 8003aae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08a      	sub	sp, #40	; 0x28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x26>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e1fb      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x41e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af8:	f7fd fb96 	bl	8001228 <HAL_GetTick>
 8003afc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b0c:	887b      	ldrh	r3, [r7, #2]
 8003b0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b14:	7efb      	ldrb	r3, [r7, #27]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00e      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x6e>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b20:	d106      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x66>
 8003b2a:	7efb      	ldrb	r3, [r7, #27]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d003      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b36:	e1cd      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x80>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x80>
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b50:	e1c0      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d003      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2205      	movs	r2, #5
 8003b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	887a      	ldrh	r2, [r7, #2]
 8003b76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	887a      	ldrh	r2, [r7, #2]
 8003b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	887a      	ldrh	r2, [r7, #2]
 8003b92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba8:	d802      	bhi.n	8003bb0 <HAL_SPI_TransmitReceive+0xe6>
 8003baa:	8a3b      	ldrh	r3, [r7, #16]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d908      	bls.n	8003bc2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	e007      	b.n	8003bd2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d007      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf8:	d97c      	bls.n	8003cf4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x13e>
 8003c02:	8a7b      	ldrh	r3, [r7, #18]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d169      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	1c9a      	adds	r2, r3, #2
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c2c:	e056      	b.n	8003cdc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d11b      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x1aa>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <HAL_SPI_TransmitReceive+0x1aa>
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d113      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d11c      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x1f2>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cbc:	f7fd fab4 	bl	8001228 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d807      	bhi.n	8003cdc <HAL_SPI_TransmitReceive+0x212>
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd2:	d003      	beq.n	8003cdc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cda:	e0fb      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1a3      	bne.n	8003c2e <HAL_SPI_TransmitReceive+0x164>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d19d      	bne.n	8003c2e <HAL_SPI_TransmitReceive+0x164>
 8003cf2:	e0df      	b.n	8003eb4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x23a>
 8003cfc:	8a7b      	ldrh	r3, [r7, #18]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	f040 80cb 	bne.w	8003e9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d912      	bls.n	8003d34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	881a      	ldrh	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	1c9a      	adds	r2, r3, #2
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b02      	subs	r3, #2
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d32:	e0b2      	b.n	8003e9a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5a:	e09e      	b.n	8003e9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d134      	bne.n	8003dd4 <HAL_SPI_TransmitReceive+0x30a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d02f      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x30a>
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12c      	bne.n	8003dd4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d912      	bls.n	8003daa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	1c9a      	adds	r2, r3, #2
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b02      	subs	r3, #2
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da8:	e012      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d148      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x3aa>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d042      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d923      	bls.n	8003e42 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	b292      	uxth	r2, r2
 8003e06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	1c9a      	adds	r2, r3, #2
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b02      	subs	r3, #2
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d81f      	bhi.n	8003e70 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	e016      	b.n	8003e70 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f103 020c 	add.w	r2, r3, #12
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e70:	2301      	movs	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e74:	f7fd f9d8 	bl	8001228 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d803      	bhi.n	8003e8c <HAL_SPI_TransmitReceive+0x3c2>
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e8a:	d102      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x3c8>
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e98:	e01c      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f af5b 	bne.w	8003d5c <HAL_SPI_TransmitReceive+0x292>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f47f af54 	bne.w	8003d5c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f987 	bl	80041cc <SPI_EndRxTxTransaction>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d006      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	661a      	str	r2, [r3, #96]	; 0x60
 8003ed0:	e000      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ed2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3728      	adds	r7, #40	; 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f00:	f7fd f992 	bl	8001228 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f10:	f7fd f98a 	bl	8001228 <HAL_GetTick>
 8003f14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f16:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	015b      	lsls	r3, r3, #5
 8003f1c:	0d1b      	lsrs	r3, r3, #20
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f26:	e054      	b.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2e:	d050      	beq.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f30:	f7fd f97a 	bl	8001228 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d902      	bls.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d13d      	bne.n	8003fc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5e:	d111      	bne.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f68:	d004      	beq.n	8003f74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f72:	d107      	bne.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8c:	d10f      	bne.n	8003fae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e017      	b.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d19b      	bne.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000000 	.word	0x20000000

08004000 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800400e:	f7fd f90b 	bl	8001228 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	4413      	add	r3, r2
 800401c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800401e:	f7fd f903 	bl	8001228 <HAL_GetTick>
 8004022:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004024:	4b3c      	ldr	r3, [pc, #240]	; (8004118 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	00da      	lsls	r2, r3, #3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	0d1b      	lsrs	r3, r3, #20
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800403c:	e05f      	b.n	80040fe <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004044:	d106      	bne.n	8004054 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405a:	d050      	beq.n	80040fe <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800405c:	f7fd f8e4 	bl	8001228 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	429a      	cmp	r2, r3
 800406a:	d902      	bls.n	8004072 <SPI_WaitFifoStateUntilTimeout+0x72>
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d13d      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408a:	d111      	bne.n	80040b0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004094:	d004      	beq.n	80040a0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d107      	bne.n	80040b0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b8:	d10f      	bne.n	80040da <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e010      	b.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d197      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000000 	.word	0x20000000

0800411c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004130:	d111      	bne.n	8004156 <SPI_EndRxTransaction+0x3a>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800413a:	d004      	beq.n	8004146 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004144:	d107      	bne.n	8004156 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004154:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2200      	movs	r2, #0
 800415e:	2180      	movs	r1, #128	; 0x80
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff fec5 	bl	8003ef0 <SPI_WaitFlagStateUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e023      	b.n	80041c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004184:	d11d      	bne.n	80041c2 <SPI_EndRxTransaction+0xa6>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418e:	d004      	beq.n	800419a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004198:	d113      	bne.n	80041c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff ff2a 	bl	8004000 <SPI_WaitFifoStateUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e000      	b.n	80041c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff0b 	bl	8004000 <SPI_WaitFifoStateUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e027      	b.n	8004250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff fe70 	bl	8003ef0 <SPI_WaitFlagStateUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e014      	b.n	8004250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fee4 	bl	8004000 <SPI_WaitFifoStateUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e000      	b.n	8004250 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <__libc_init_array>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4d0d      	ldr	r5, [pc, #52]	; (8004290 <__libc_init_array+0x38>)
 800425c:	4c0d      	ldr	r4, [pc, #52]	; (8004294 <__libc_init_array+0x3c>)
 800425e:	1b64      	subs	r4, r4, r5
 8004260:	10a4      	asrs	r4, r4, #2
 8004262:	2600      	movs	r6, #0
 8004264:	42a6      	cmp	r6, r4
 8004266:	d109      	bne.n	800427c <__libc_init_array+0x24>
 8004268:	4d0b      	ldr	r5, [pc, #44]	; (8004298 <__libc_init_array+0x40>)
 800426a:	4c0c      	ldr	r4, [pc, #48]	; (800429c <__libc_init_array+0x44>)
 800426c:	f000 f820 	bl	80042b0 <_init>
 8004270:	1b64      	subs	r4, r4, r5
 8004272:	10a4      	asrs	r4, r4, #2
 8004274:	2600      	movs	r6, #0
 8004276:	42a6      	cmp	r6, r4
 8004278:	d105      	bne.n	8004286 <__libc_init_array+0x2e>
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004280:	4798      	blx	r3
 8004282:	3601      	adds	r6, #1
 8004284:	e7ee      	b.n	8004264 <__libc_init_array+0xc>
 8004286:	f855 3b04 	ldr.w	r3, [r5], #4
 800428a:	4798      	blx	r3
 800428c:	3601      	adds	r6, #1
 800428e:	e7f2      	b.n	8004276 <__libc_init_array+0x1e>
 8004290:	08004350 	.word	0x08004350
 8004294:	08004350 	.word	0x08004350
 8004298:	08004350 	.word	0x08004350
 800429c:	08004354 	.word	0x08004354

080042a0 <memset>:
 80042a0:	4402      	add	r2, r0
 80042a2:	4603      	mov	r3, r0
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d100      	bne.n	80042aa <memset+0xa>
 80042a8:	4770      	bx	lr
 80042aa:	f803 1b01 	strb.w	r1, [r3], #1
 80042ae:	e7f9      	b.n	80042a4 <memset+0x4>

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr
